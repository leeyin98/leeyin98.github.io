<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人简历</title>
      <link href="/posts/ee90.html"/>
      <url>/posts/ee90.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h1><object data="./myResume/myResume.pdf" type="application/pdf" width="100%" height="877px"></object><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【混剪练习.00】怎样的战斗在等待着我</title>
      <link href="/posts/e773.html"/>
      <url>/posts/e773.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>BGM：Billie Eilish - you should see me in a crown (IIZI Remix)<br>《Pr上分攻略》中的练手视频素材<br>“艾欧尼亚，昂扬不灭！”<br>“断剑重铸之日，骑士归来之时！”</p><h3 id="开始观看"><a href="#开始观看" class="headerlink" title="开始观看"></a>开始观看</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=98416433&amp;cid=167999668&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视频剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶段性练手项目（二）</title>
      <link href="/posts/4bfc.html"/>
      <url>/posts/4bfc.html</url>
      
        <content type="html"><![CDATA[<h1 id="反应测试小游戏"><a href="#反应测试小游戏" class="headerlink" title="反应测试小游戏"></a>反应测试小游戏</h1><h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h2><p>1、玩家输入错误，系统退出</p><blockquote><p>系统输出：dl<br>玩家输入：di<br>输入错误，游戏结束！！！</p></blockquote><p>2、玩家输入正确，显示玩家相关信息</p><blockquote><p>系统输出：jk<br>玩家输入：jk<br>当前玩家级别：1，当前得分：1，已用时间：2<br>系统输出：aa<br>玩家输入：aa<br>当前玩家级别：1，当前得分：2，已用时间：5</p></blockquote><p>3、玩家输入超时，系统退出</p><blockquote><p>系统输出：qq<br>玩家输入：qq<br>对不起，输入超时，游戏结束！！！</p></blockquote><p>4、玩家过关，等级提升，难度加大，积分清零，已用时间重新计算</p><blockquote><p>系统输出：fb<br>玩家输入：fb<br>当前玩家级别：1，当前得分：10，已用时间：16<br>系统输出：hxd<br>玩家输入：hxd<br>当前玩家级别：2，当前得分：2，已用时间：1</p></blockquote><p>5、玩家通关</p><blockquote><p>系统输出：zsghxd<br>玩家输入：zsghxd<br>当前玩家级别：6，当前得分：60，已用时间：31<br>恭喜你，通关啦！</p></blockquote><h2 id="2-功能拆分"><a href="#2-功能拆分" class="headerlink" title="2. 功能拆分"></a>2. 功能拆分</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016165018.png" alt=""></p><h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3. 源代码"></a>3. 源代码</h2><h3 id="3-1-Player类"><a href="#3-1-Player类" class="headerlink" title="3.1 Player类"></a>3.1 Player类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//玩家当前级别</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩家当前得分</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> perScore<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩家的开始时间</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩家的已用时间</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> elapsedTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLevelNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo <span class="token operator">=</span> levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPerScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> perScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>perScore <span class="token operator">=</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPerSocre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStartTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> startTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setElapsedTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> elapsedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elapsedTime <span class="token operator">=</span> elapsedTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elapsedTime <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"玩家的当前级别："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>levelNo<span class="token operator">+</span><span class="token string">",当前得分为："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>perScore<span class="token operator">+</span><span class="token string">",已用时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>elapsedTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//玩</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//玩家和电脑玩</span>        Game g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将当前玩家传给电脑</span>        g<span class="token punctuation">.</span><span class="token function">setPlayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//外层循环：一共玩多少级。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//升级操作</span>            levelNo<span class="token operator">=</span>levelNo<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回当前时间距离1970年1-1之间的毫秒数</span>            startTime<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分数的清零操作</span>            perScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getStrTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String out <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">GenStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统输出："</span><span class="token operator">+</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String in <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                g<span class="token punctuation">.</span><span class="token function">compareResult</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-Game类"><a href="#3-2-Game类" class="headerlink" title="3.2 Game类"></a>3.2 Game类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Player player<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlayer</span><span class="token punctuation">(</span>Player player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> player<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Player <span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 系统产生的随机字符串：     *    玩家等级发生变化：字符串的长度会变长     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">GenStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前级别</span>        Level currentLevel <span class="token operator">=</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>currentLevel<span class="token punctuation">.</span><span class="token function">getStrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>currentLevel<span class="token punctuation">.</span><span class="token function">getStrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"a"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"b"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"c"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"d"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"e"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"f"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"g"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"z"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 比较系统的输出和用户的输入     * @param out:系统的输出     * @param in：玩家的输入     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compareResult</span><span class="token punctuation">(</span>String out<span class="token punctuation">,</span>String in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取得结束时间</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">setElapsedTime</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">;</span>            Level currentLevel <span class="token operator">=</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>diff<span class="token operator">&lt;=</span>currentLevel<span class="token punctuation">.</span><span class="token function">getTimeLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">setPerScore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">getPerSocre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>currentLevel<span class="token punctuation">.</span><span class="token function">getPerScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通关判断。</span>                Level max <span class="token operator">=</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span>LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">getPerSocre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>max<span class="token punctuation">.</span><span class="token function">getPerScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">.</span><span class="token function">getStrTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜你，通关了！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起,输入超时，系统退出！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//退出应用程序</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起,输入错误，系统退出！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//退出应用程序</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-Level类"><a href="#3-3-Level类" class="headerlink" title="3.3 Level类"></a>3.3 Level类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 等级类 * @author Administrator */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Level</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//级别号</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串的长度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> strLength<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前级别输入字符串的次数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> strTimes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前的级别限制时间</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timeLimit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//级别的每次得分</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> perScore<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Level</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelNo<span class="token punctuation">,</span> <span class="token keyword">int</span> strLength<span class="token punctuation">,</span> <span class="token keyword">int</span> strTimes<span class="token punctuation">,</span> <span class="token keyword">long</span> timeLimit<span class="token punctuation">,</span>            <span class="token keyword">int</span> perScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo <span class="token operator">=</span> levelNo<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strLength <span class="token operator">=</span> strLength<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strTimes <span class="token operator">=</span> strTimes<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeLimit <span class="token operator">=</span> timeLimit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>perScore <span class="token operator">=</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//alt+shift+s </span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLevelNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo <span class="token operator">=</span> levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> strLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> strLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strLength <span class="token operator">=</span> strLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStrTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> strTimes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrTimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> strTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strTimes <span class="token operator">=</span> strTimes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimeLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> timeLimit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeLimit</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeLimit <span class="token operator">=</span> timeLimit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPerScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPerScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> perScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>perScore <span class="token operator">=</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-LevelParam类"><a href="#3-4-LevelParam类" class="headerlink" title="3.4 LevelParam类"></a>3.4 LevelParam类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LevelParam</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Level<span class="token punctuation">[</span><span class="token punctuation">]</span> LEVEL_PARAMS<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-测试类"><a href="#3-5-测试类" class="headerlink" title="3.5 测试类"></a>3.5 测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartGame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4. 测试结果"></a>4. 测试结果</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础5. 封装、继承与多态</title>
      <link href="/posts/efa8.html"/>
      <url>/posts/efa8.html</url>
      
        <content type="html"><![CDATA[<h1 id="第5讲-封装、继承与多态"><a href="#第5讲-封装、继承与多态" class="headerlink" title="第5讲 封装、继承与多态"></a>第5讲 封装、继承与多态</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第5讲主要讲述：构造方法；方法重载；部分关键字的使用；方法重写；多态；</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h3><h4 id="1-1-面向对象回顾"><a href="#1-1-面向对象回顾" class="headerlink" title="1.1 面向对象回顾"></a>1.1 面向对象回顾</h4><ul><li>在分析问题时，一般先有对象，在众多对象中抽取出类，分析这些类有哪些属性和方法</li><li>在编程过程中，一般先创建类，然后在通过类来创建对象</li><li>在分析问题时，一般可以通过类图来进行讨论和分析<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016143109.png" alt=""></li></ul><h4 id="1-2-构造方法"><a href="#1-2-构造方法" class="headerlink" title="1.2 构造方法"></a>1.2 构造方法</h4><p>语法：</p><pre class=" language-java"><code class="language-java">访问修饰符   类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    对象初始化    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>构造方法的方法名和类名相同</li><li><strong>当我们没有自定义构造方法时，系统会自动产生一个无参数的，什么都不做的构造方法</strong></li><li><strong>当我们自定义构造方法后，系统的默认构造方法不会自动产生，必须手动加上</strong></li><li>构造方法的作用就是完成对象的初始化操作</li><li>构造方法也可以重载(Overload)</li><li><strong>构造方法在new对象的时候自动调用</strong></li><li>如果在本类中的构造方法需要互相调用时，使用this()进行调用，但是需要留有一个出口，放置递归调用</li><li>通过this()调用构造方法时，必须放在构造方法的第一行<br>例：</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> health<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> love <span class="token punctuation">;</span>    <span class="token keyword">private</span> String strain<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我出生了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">=</span> health<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> love<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>health<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>love <span class="token operator">=</span> love <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> love<span class="token punctuation">,</span>String strain<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>health<span class="token punctuation">,</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strain<span class="token operator">=</span>strain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"狗的名字："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",健康值："</span><span class="token operator">+</span>health<span class="token operator">+</span><span class="token string">",亲密度："</span><span class="token operator">+</span>love<span class="token operator">+</span><span class="token string">",品种："</span><span class="token operator">+</span>strain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-方法重载-Overload"><a href="#1-3-方法重载-Overload" class="headerlink" title="1.3 方法重载(Overload)"></a>1.3 方法重载(Overload)</h4><p><strong>方法重载的要求</strong>：</p><blockquote><ol><li>在同一个类中</li><li>方法名称相同</li><li>参数列表不同（参数的个数or参数的数据类型）</li><li>与返回值和修饰符无关</li></ol></blockquote><p>例：现在需要进行一下运算<br>2个整数相加、3个整数相加、4个整数相加…</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMath</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add3</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">int</span> num4<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyMath m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时已经创建了四个不同方法名的方法进行计算，但如果需求更多，则需要创建更多的方法，而方法名过多显得累赘<br>这时候我们就可以通过方法重载来解决问题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMath</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//由于参数个数不同，方法名一样，也是重载。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">int</span> num4<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//由于参数的类型不同，方法名一样，依然是重载</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">double</span> num4<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyMath m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-this与static关键字"><a href="#1-4-this与static关键字" class="headerlink" title="1.4 this与static关键字"></a>1.4 this与static关键字</h4><p><strong>this关键字</strong><br>this：表示的就是当前对象<br>this()：调用构造方法，必须在构造方法中，并且在构造方法的第一行<br>this.属性：访问本类的属性<br>this.方法：访问本类的方法</p><p><strong>static关键字</strong><br>static可以修饰变量，变量被修饰后称为静态变量（类变量）<br>static可以修饰方法，方法被修饰后称为静态方法（类方法）<br>静态变量和静态方法：可以通过<code>类名.静态变量名(静态方法名)</code>的形式访问，也可以通过对象名.静态变量(静态方法)访问(不推荐)<br>static可以修饰代码块，代码块被修饰后称为静态代码块，静态代码块只执行一次<br>代码块：静态的只能调用静态的，不能调用非静态的，而非静态的可以调用静态的和非静态的<br>static可以修饰类，但只能修饰内部类，被修饰的内部类称为静态内部类<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150237.png" alt=""></p><h4 id="1-5-封装"><a href="#1-5-封装" class="headerlink" title="1.5 封装"></a>1.5 封装</h4><p>概述：<strong>封装就是隐藏内部细节，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问（方法是对代码的封装，类是对属性和方法的封装）</strong><br>步骤：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150518.png" alt=""></p><p>一个简单Java类的编写规则：JavaBean</p><ul><li>类要公开，使用public声明</li><li>属性私有化</li><li>手动提供无参构造方法</li><li>提供getter、setter方法</li><li>在setter中加入控制语句（可选）</li><li>类实现序列化接口</li></ul><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><h4 id="2-1-继承的好处"><a href="#2-1-继承的好处" class="headerlink" title="2.1 继承的好处"></a>2.1 继承的好处</h4><p><strong>继承符合Java的设计原则：开闭原则（对扩展开放，对修改封闭）</strong><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150919.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150940.png" alt=""></p><h4 id="2-2-继承的使用"><a href="#2-2-继承的使用" class="headerlink" title="2.2 继承的使用"></a>2.2 继承的使用</h4><p>1、编写父类（抽取子类中公共属性和方法）<br>2、编写子类，并用extends继承父类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 子类类名 <span class="token keyword">extends</span> 父类类名<span class="token punctuation">{</span>    子类的操作    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：</p><blockquote><ol><li>在Java中，继承是单根性的，一个类只能有一个直接父类</li><li>继承具备传递性，一个父类可以拥有多个间接子类</li><li>在Java中，java.lang.Object是所有类的父类</li><li>在创建子类时，会默认调用父类的无参构造方法，然后再调用子类的构造方法</li><li>父类不能被子类继承的成员：private成员、构造方法和子父类不同包却用默认访问权限的成员</li></ol></blockquote><h4 id="2-3-方法重写"><a href="#2-3-方法重写" class="headerlink" title="2.3 方法重写"></a>2.3 方法重写</h4><p><strong>方法写的要求</strong>：</p><blockquote><ol><li>方法名必须相同</li><li>参数列表相同</li><li>返回值类型相同或是其子类</li><li>访问权限不能严于父类</li><li>重写方法不能使用比被从重写方法抛出更多异常</li></ol></blockquote><p><strong>重写(Override)与重载(Overload)的区别</strong>：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016152304.png" alt=""></p><h4 id="2-4-继承关系下的执行顺序"><a href="#2-4-继承关系下的执行顺序" class="headerlink" title="2.4 继承关系下的执行顺序"></a>2.4 继承关系下的执行顺序</h4><p>执行优先级从上至下递减：</p><ul><li>父类静态代码块</li><li>子类静态代码块</li><li>父类属性初始化</li><li>父类代码块</li><li>父类构造方法</li><li>子类属性初始化</li><li>子类代码块</li><li>子类构造方法</li></ul><h4 id="2-5-super、abstract和final关键字"><a href="#2-5-super、abstract和final关键字" class="headerlink" title="2.5 super、abstract和final关键字"></a>2.5 super、abstract和final关键字</h4><p><strong>super关键字</strong></p><blockquote><p>super可以访问父类继承过来的属性和方法：super.属性名、super.方法名()<br>super()可以调用父类的构造方法，但是super()必须放在子类构造方法的第一行<br>super在调用父类构造方法时，与this调用构造方法不能共存(即super()与this()不能共存)<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016152755.png" alt=""></p></blockquote><p><strong>abstract关键字</strong></p><blockquote><p>abstract可以修饰一个类，被修饰的类称为抽象类，抽象类不能被实例化：<code>public abstract class Demo(){}</code><br>抽象的组成 = 普通的类的组成+抽象方法<br>abstract可以修饰一个方法，被修饰的方法称为抽象方法，抽象方法没有方法体：<code>public abstract void method();</code><br>如果一个类中又抽象方法，则这个类必须定义为抽象类<br>如果一个子类继承了抽象类，则这个子类必须重写抽象类中的所有抽象方法，除非子类也是抽象类<br>抽象类一般用于模板设计模式和适配器设计模式<br>抽象类也有构造方法</p></blockquote><p><strong>final关键字</strong><br>final关键字可以修饰类、方法和变量</p><blockquote><p>被final修饰的变量称为常量，不可以被修改<br>被final修饰的方法不能被重写<br>被final修饰的类不能被继承<br>被final修饰的基本数据类型不能改变值<br>被final修饰的引用数据类型地址不能被重新指向<br>在JDK中，常用的被final修饰的类有：</p></blockquote><ol><li>java.lang.String</li><li>java.lang.StringBuffer</li><li>java.lang.Integer</li><li>java.lang.System</li><li>java.lang.Class<t><br>…<br>注：final关键字不可以和abstract关键字一起使用！</t></li></ol><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><h4 id="3-1-为什么使用多态"><a href="#3-1-为什么使用多态" class="headerlink" title="3.1 为什么使用多态"></a>3.1 为什么使用多态</h4><p><strong>多态也是开闭原则的一个体现</strong><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016155008.png" alt=""><br>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//喂养狗</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Dog d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//喂养企鹅</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Penguin p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-什么是多态"><a href="#3-2-什么是多态" class="headerlink" title="3.2 什么是多态"></a>3.2 什么是多态</h4><p>在生活中，多态实际上就是一种事物的不同形态，比如打印机：打印不同大小的纸张，彩色或黑白<br>在程序中，多态是指同一个引用类型，使用不同的示例而执行不同的操作</p><p>改造之前的代码：<br>1、在父类中创建eat方法，此方法先选择空实现：<code>public void eat(){}</code><br>2、子类中重写eat方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>health<span class="token operator">&lt;=</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养了一根骨头，体力增加了10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>health<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无需喂养"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、在mater类中删除之前的所有feed，保留一个并更改方法的定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//p:宠物</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Pet p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、在测试类中，传递子类对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Master m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"leeyin98"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Penguin  p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span><span class="token string">"qq"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"波斯猫"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"黑色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养前："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养后："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-多态的实现"><a href="#3-3-多态的实现" class="headerlink" title="3.3 多态的实现"></a>3.3 多态的实现</h4><p><strong>实现多态的条件</strong>：</p><blockquote><ol><li>在继承关系下</li><li>完成方法重写</li><li>父类引用指向子类对象（里式替换原则）：将父类作为方法的参数，将父类作为方法的返回值</li></ol></blockquote><p>需求：现在主人需要从宠物商店领养一只宠物<br>1、编写一个工厂类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetStore</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建对象     * @param typeName：宠物的类型     * @return 宠物     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Pet <span class="token function">getPetInstance</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">"拉布拉多犬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"波斯猫"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span><span class="token string">"qq"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、主人类中增加一个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Pet <span class="token function">getPet</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> PetStore<span class="token punctuation">.</span><span class="token function">getPetInstance</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、重写测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Master m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"leeyin98"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//父类引用指向子类独享</span>        Pet d <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pet  p <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pet c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养前："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养后："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-类型转换"><a href="#3-4-类型转换" class="headerlink" title="3.4 类型转换"></a>3.4 类型转换</h4><p>想要调用子类的方法有两种方式：<br>1、<code>父类类型  对象 = new 子类类型();</code> 向上类型转换<br>2、<code>父类类型  对象 = new 子类类型();</code><br>   <code>子类类型  对象 = 子类类型(父类对象)</code> 向下类型转换<br>可以看出，向下转型前提是，父类对象指向子类对象，所以得先向上转型，否则可能产生ClassCastException异常。此时则需要使用<code>对象 instanceof 类</code>，在使用instanceof时，对象所在的类和后面的类型要在同一颗继承树上，否则编译报错。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础4.  类、方法</title>
      <link href="/posts/331f.html"/>
      <url>/posts/331f.html</url>
      
        <content type="html"><![CDATA[<h1 id="第4讲-类、包和接口"><a href="#第4讲-类、包和接口" class="headerlink" title="第4讲 类、包和接口"></a>第4讲 类、包和接口</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第4讲主要讲述：类、字段、方法；类的继承；访问控制修饰符；</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-类、字段、方法"><a href="#1-类、字段、方法" class="headerlink" title="1. 类、字段、方法"></a>1. 类、字段、方法</h3><h4 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h4><ul><li>组成java程序的基本要素</li><li>字段（field）是类的属性，用变量表示</li><li>方法（method）是类的功能和操作，用函数表示</li><li>封装了一类对象的状态和方法，即它将变量和函数封装到一个类中<br>定义类的语法：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//属性</span>  访问修饰符 DataType   attributeName1<span class="token punctuation">;</span>  访问修饰符 DataType   attributeName2<span class="token punctuation">;</span>  访问修饰符 DataType   attributeName3<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//方法</span>  <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li></ul><pre><code>#### 1.2 创建和使用对象创建对象：`类名  对象名 = new 类名();`访问对象的属性或方法，需要用符号“.”  如：```javaPerson p = new Person();System.out.println(p.name)；p.sayHello()；</code></pre><h4 id="1-3-方法"><a href="#1-3-方法" class="headerlink" title="1.3 方法"></a>1.3 方法</h4><p>方法的基本语法：</p><pre class=" language-java"><code class="language-java">访问修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//方法的具体操作。</span>      <span class="token punctuation">[</span><span class="token keyword">return</span> value<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>1、有具体的返回类型时，在方法体中，必须return具体的值，值的类型必须和返回值类型匹配<br>2、return：返回到方法的调用处<br>3、返回值为void时，表示此方法的返回值为空,在具体的方法体中不要返回一个具体的值，但是可以return;(表示返回到方法调用处)<br>方法的调用总结：</p><ul><li>本类中可以直接调用方法</li><li>非本类中必须通过创建对象 ，然后通过对象名.方法名()的形式进行调用</li></ul><p>成员变量：类中定义属性，它的作用域在整个类中<br>局部变量：局部变量的作用范围仅仅在定义它的方法内，或者是在定义它的控制流块中<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015144936.png" alt=""></p><p>方法定义时的参数：形参。<br>方法调用时，传递时的参数称为实参。</p><ul><li>将对象作为方法的参数<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span></code></pre></li></ul><p>class Student {<br>    int javaScore;<br>    int htmlScore;<br>    int dbScore;<br>}<br>class ScoreCalc {<br>    public int getSum(Student s){<br>        return s.dbScore+s.htmlScore+s.javaScore;<br>    }<br>    public int getAvg(Student s) {<br>        return getSum(s)/3;<br>    }</p><p>}</p><p>package com.leeyin98.test;<br>public class ScoreCalcTest {<br>    public static void main(String[] args) {<br>        ScoreCalc sc = new ScoreCalc();<br>        //创建学生对象<br>        Student s = new Student();<br>        s.dbScore=90;<br>        s.htmlScore=80;<br>        s.javaScore=60;<br>        System.out.println(“总分为：”+sc.getSum(s));<br>        System.out.println(“平均分为：”+sc.getAvg(s));</p><pre><code>}</code></pre><p>}</p><pre><code>- 将对象数组作为方法的参数```javapackage com.leeyin98.demo02;class Student {    int javaScore;    int htmlScore;    int dbScore;    //升高    int height;}class HeightCalc {    public int getAvgHeight(Student[] students){        int sum = 0 ;         for(int i = 0 ;i&lt;students.length;i++) {            sum =sum+students[i].height;        }        return sum/students.length;    }}public class HeightCalcTest {    public static void main(String[] args) {        HeightCalc hc = new HeightCalc();        Student[] students = new Student[4];        students[0]=new Student();        students[1]=new Student();        students[2]=new Student();        students[3]=new Student();        students[0].height=180;        students[1].height=190;        students[2].height=220;        students[3].height=165;        System.out.println(hc.getAvgHeight(students));    }}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015145840.png" alt=""></p><h5 id="1-3-1-构造方法"><a href="#1-3-1-构造方法" class="headerlink" title="1.3.1 构造方法"></a>1.3.1 构造方法</h5><p>构造方法和类名同名，且不写返回数据类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//变量</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造方法产生！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1-3-2-方法重载"><a href="#1-3-2-方法重载" class="headerlink" title="1.3.2 方法重载"></a>1.3.2 方法重载</h5><ul><li>多个方法有相同的名字，编译时也能识别出来</li><li>这些同名方法的返回值类型不同，或参数个数或参数类型不同</li><li>通过方法重载可以实现多态<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//变量</span>  <span class="token comment" spellcheck="true">//方法重载</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!My name is"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!My age is"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="1-4-this的使用"><a href="#1-4-this的使用" class="headerlink" title="1.4 this的使用"></a>1.4 this的使用</h4><ul><li>在方法及构造方法中，使用this来访问字段及方法</li><li>解决局部变量与域同名的问题，如：<pre class=" language-java"><code class="language-java">  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this.age表示域变量，age表示参数变量</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li>构造方法中，用this调用另一个构造方法，但调用语句必须放第一句</li></ul><h4 id="1-5-再谈引用数据类型"><a href="#1-5-再谈引用数据类型" class="headerlink" title="1.5 再谈引用数据类型"></a>1.5 再谈引用数据类型</h4><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person  p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的值为："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p的age："</span><span class="token operator">+</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>内存图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015150356.png" alt=""></p><p>修改change方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>内存图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015150512.png" alt=""></p><p>总结：</p><ul><li><strong>对于基本类型而言，传递的就是其值</strong></li><li><strong>对于引用数据类型而言，传递的就是地址的值</strong></li><li><strong>一个栈只能指向一个堆。一个堆可以被多个栈所指向</strong></li></ul><h3 id="2-类的继承-初步"><a href="#2-类的继承-初步" class="headerlink" title="2. 类的继承(初步)"></a>2. 类的继承(初步)</h3><h4 id="2-1-继承"><a href="#2-1-继承" class="headerlink" title="2.1 继承"></a>2.1 继承</h4><ul><li>继承是面向对象的程序设计中最为重要的特征之一</li><li>Java中的继承是通过extends关键词来实现的</li><li>字类、父类或超类（父类包括直接或间接被继承的类）</li><li>Java支持单继承：一个类只能有一个直接父类</li><li>子类继承父类的状态和行为(字段和方法，构造方法不可继承）<br>  -可以修改父类的状态或重载父类的行为(字段和方法）<br>  -可以添加新的状态和行为(字段和方法）</li></ul><h4 id="2-2-super的使用"><a href="#2-2-super的使用" class="headerlink" title="2.2 super的使用"></a>2.2 super的使用</h4><ul><li>使用super访问父类的域和方法，this也可以，但用super更加明确</li><li>有时需要使用super以区别同名的域与方法</li><li>构造方法不可继承，但子类在构造方法中可以用super来调用父类的构造方法<ul><li>使用时，super()必须放在第一句</li></ul></li></ul><h4 id="2-3-父类对象与子类对象的转换"><a href="#2-3-父类对象与子类对象的转换" class="headerlink" title="2.3 父类对象与子类对象的转换"></a>2.3 父类对象与子类对象的转换</h4><ul><li>子类对象可以被视为其父类的一个对象</li><li>父类对象不能被当做其子类的一个对象</li><li>若一个方法的形式参数定义的是父类对象，那么调用该方法时，可以使用子类对象作为实际参数</li><li>若父类对象引用指向的实际是一个子类对象，那么这个父类对象的引用可以用强制类型转换成子类对象的引用</li></ul><h4 id="2-4-package包"><a href="#2-4-package包" class="headerlink" title="2.4 package包"></a>2.4 package包</h4><ul><li><code>package pkg1[.pkg2[.pkg3…..]]</code></li><li>包与子包的定义，实际是为了解决名字空间、名字冲突</li><li>与类的继承无关，一个子类与其父类可位于不同的包中</li><li>同一个包中的各个类，默认情况下可互相访问</li><li>使用java中已提供的类，需要用import语句来导入所需要的类。</li><li>语句格式：<code>import package1[.package2…].(classname|*)</code>;如：<ul><li><code>import java.awt.event.*;</code></li></ul></li></ul><h3 id="3-访问控制修饰符"><a href="#3-访问控制修饰符" class="headerlink" title="3. 访问控制修饰符"></a>3. 访问控制修饰符</h3><h4 id="3-1-可见性，即能在哪些地方被使用"><a href="#3-1-可见性，即能在哪些地方被使用" class="headerlink" title="3.1 可见性，即能在哪些地方被使用"></a>3.1 可见性，即能在哪些地方被使用</h4><table><thead><tr><th></th><th align="center">同一个类中</th><th align="center">同一个包中</th><th align="center">不同包中的子类</th><th align="center">不包中的非子类</th></tr></thead><tbody><tr><td>private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>默认</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td>protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td>public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h4 id="3-2-private修饰"><a href="#3-2-private修饰" class="headerlink" title="3.2 private修饰"></a>3.2 private修饰</h4><p>将字段用private修饰，用setXXXX与getXXXX方法对类的属性进行存取<br>优点：</p><ul><li>属性用prvate更好地封装和隐藏，外部类不能随意存取和修改</li><li>提供方法来存取对象的属性，在方法中可以对给定的参数的合法性进行校验</li><li>方法可以用来给出计算后的值</li><li>方法可以完成其他必要的工作（如清理资源、设定状态等）</li><li>只提供getXXXX方法，而不提供setXXXX方法，可以保证属性是只读的<br>例：<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person2</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="3-3-非访问控制符"><a href="#3-3-非访问控制符" class="headerlink" title="3.3 非访问控制符"></a>3.3 非访问控制符</h4><table><thead><tr><th></th><th align="center">基本含义</th><th align="center">修饰类</th><th align="center">修饰成员</th><th align="center">修饰局部变量</th></tr></thead><tbody><tr><td>static</td><td align="center">静态的、非实例的、类的</td><td align="center">可修饰内部类</td><td align="center">√</td><td align="center"></td></tr><tr><td>final</td><td align="center">最终的、不可改变的</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>abstract</td><td align="center">抽象的、不可实例化的</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr></tbody></table><h4 id="3-4-接口-interface"><a href="#3-4-接口-interface" class="headerlink" title="3.4 接口(interface)"></a>3.4 接口(interface)</h4><ul><li>定义接口interface，如<code>interface Collection{....}</code></li><li>实现接口implements，如<code>class FIFOQueue implements Collection{...}</code></li><li>作用：<ul><li>通过接口可以实现不相关类的相同行为，而不需要考虑这些类之间的层次关系，从而在一定意义上实现了多重继承</li><li>通过接口可以指明多个类需要实现的方法</li><li>通过接口可以了解对象的交互界面，而不需要了解对象所对应的类</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础3. 数据运算、流程控制和数组</title>
      <link href="/posts/d0a4.html"/>
      <url>/posts/d0a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="第3讲-数据运算、流程控制和数组"><a href="#第3讲-数据运算、流程控制和数组" class="headerlink" title="第3讲 数据运算、流程控制和数组"></a>第3讲 数据运算、流程控制和数组</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第3讲主要讲述：数据类型、变量与常量；运算符与表达式；流程控制语句；数组</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-数据类型、变量与常量"><a href="#1-数据类型、变量与常量" class="headerlink" title="1. 数据类型、变量与常量"></a>1. 数据类型、变量与常量</h3><h4 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h4><ul><li>基本类型：变量在栈</li><li>引用类型：变量引用到堆<ul><li><code>double d = 3;</code></li><li><code>Person p = new Preson();</code><br>赋值时：</li><li><code>double d2=d;</code>    复制的是值</li><li><code>Person p2=p;</code>    复制的是引用<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228143215.png" alt=""></li></ul></li></ul><h4 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228143338.png" alt=""></p><ul><li>常用的基本数据类型<table><thead><tr><th>数据类型</th><th align="center">说明</th><th align="center">位数</th><th align="center">应用</th><th align="center">示例</th></tr></thead><tbody><tr><td>int</td><td align="center">整型</td><td align="center">32</td><td align="center">用于存储整数，如年龄、个数</td><td align="center">int age=21;</td></tr><tr><td>double</td><td align="center">双精度浮点型</td><td align="center">64</td><td align="center">用于存储小数，如商品价格</td><td align="center">double price=15.5;</td></tr><tr><td>float</td><td align="center">单精度浮点型</td><td align="center">32</td><td align="center">用于存储小数，如身高</td><td align="center">float height=175.2f;</td></tr><tr><td>char</td><td align="center">字符型</td><td align="center">16</td><td align="center">用于存储单个字符，如性格’男’</td><td align="center">char sex=’男’;</td></tr><tr><td>boolean</td><td align="center">布尔型</td><td align="center">8</td><td align="center">表示真或假，取值只能为true或false</td><td align="center">boolean flag=true;</td></tr><tr><td>byte</td><td align="center">字节</td><td align="center">8</td><td align="center">用于处理二进制数据</td><td align="center">byte by = 101;</td></tr><tr><td>short</td><td align="center">短整型</td><td align="center">16</td><td align="center">用于存储整数</td><td align="center">short num = 99;</td></tr><tr><td>long</td><td align="center">长整型</td><td align="center">64</td><td align="center">有时处理日期类型时用到</td><td align="center">long num = 369;</td></tr></tbody></table></li></ul><p>注：</p><ul><li>为float变量赋值时在数值后添加字母f</li><li>为char变量赋值时使用单引号引起来</li><li>String是一种常见的引用数据类型，用来表示字符串，赋值时用双引号引起来</li><li>Java中没有“无符号数”</li></ul><h4 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h4><ul><li>自动类型转换：小→大<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> firstAvg <span class="token operator">=</span> <span class="token number">81.22</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> rise <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//自动类型转换</span>      <span class="token keyword">double</span> secondAvg <span class="token operator">=</span> firstAvg<span class="token operator">+</span>rise<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//任何类型和字符串做连接操作（+）->字符串类型</span><span class="token punctuation">}</span></code></pre></li><li>强制类型转换：将一个数据类型大的值放在一个数据类型小的变量中，此时必须通过强制类型转换才可以放的下，但是会损失精度。<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> firstAvg <span class="token operator">=</span> <span class="token number">81.22</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> rise <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//强制类型转换</span>      <span class="token keyword">int</span> secondAvg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> firstAvg<span class="token operator">+</span>rise<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//任何类型和字符串做连接操作（+）->字符串类型</span><span class="token punctuation">}</span></code></pre></li></ul><pre><code>### 2. 运算符表达式#### 2.1 算术运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145919.png)#### 2.2 赋值运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145929.png)#### 2.3 比较运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145941.png)#### 2.4 逻辑运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145949.png)注：&amp;&amp;和&amp;，||和|的区别：- &amp;&amp;（短路与）：2个表达式同时为true，最终的表达式才为true。- &amp;（逻辑与）：它的执行流程同短路与，但是&amp;&amp;操作如果发现第一个表达式为false时，此时不会去执行第二个表达式。- ||（短路或）：只要有一个表达式为true，则最终表达式也为true。- |（逻辑或）：它的执行流程同短路或，但是||操作如果发现第一个表达式为true是，此时不会执行第二个表达式。#### 2.5 位运算符1. ~：取反2. &amp;：按位与3. |：按位或4. ^：按位异或#### 2.6 移位运算符- 左移："`a&lt;&lt;b;`"  将二进制形式的a逐位左移b位，最低位空出的b位补0- 无符号右移："`a&gt;&gt;&gt;b;`"  将二进制形式的a逐位右移b位，最低位空出的b位补0- 带符号右移："`a&gt;&gt;b;`"  将二进制形式的a逐位右移b位，最高位空出的b位补原来的符号位#### 2.7 条件运算符语法形式：布尔表达式 ？ 表达式1 ：表达式2运算过程：如果布尔表达式的值为true，则返回表达式1的值，否则返回表达式2的值。例如：```javaString str = (8&gt;5) ? "8大于5" : "8不大于5" ;System.out.println(str);</code></pre><p>因为表达式8&gt;5为true，所以返回“8大于5”</p><h4 id="2-8-Java中运算符的优先级（从上到下，由高到低）"><a href="#2-8-Java中运算符的优先级（从上到下，由高到低）" class="headerlink" title="2.8 Java中运算符的优先级（从上到下，由高到低）"></a>2.8 Java中运算符的优先级（从上到下，由高到低）</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228150822.png" alt=""></p><h4 id="2-9-表达式中的类型转换"><a href="#2-9-表达式中的类型转换" class="headerlink" title="2.9 表达式中的类型转换"></a>2.9 表达式中的类型转换</h4><p><code>int→long→float→double</code><br>所有的byte、short、char参与算术运算都转为int</p><h3 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3. 流程控制语句"></a>3. 流程控制语句</h3><h4 id="3-1-if语句"><a href="#3-1-if语句" class="headerlink" title="3.1 if语句"></a>3.1 if语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    条件成立时执行的代码<span class="token punctuation">}</span></code></pre><h4 id="3-2-if…else语句"><a href="#3-2-if…else语句" class="headerlink" title="3.2 if…else语句"></a>3.2 if…else语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件的布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">2</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-多重if语句"><a href="#3-3-多重if语句" class="headerlink" title="3.3 多重if语句"></a>3.3 多重if语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">3</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-if嵌套语句"><a href="#3-4-if嵌套语句" class="headerlink" title="3.4 if嵌套语句"></a>3.4 if嵌套语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        代码块<span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        代码块<span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">3</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-switch语句"><a href="#3-5-switch语句" class="headerlink" title="3.5 switch语句"></a>3.5 switch语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>        执行代码块<span class="token number">1</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>        执行代码块<span class="token number">2</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 值n<span class="token operator">:</span>        执行代码块n  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>        默认执行的代码<span class="token punctuation">}</span></code></pre><p><code>注意事项：</code></p><blockquote><ol><li>switch 后面小括号中表达式的值必须是整型或字符型</li><li>case 后面的值可以是常量数值，如 1、2；也可以是一个常量表达式，如 2+2 ；但不能是变量或带有变量的表达式，如 a * 2</li><li>case 匹配后，执行匹配块里的程序代码，如果没有遇见 break 会继续执行下一个的 case 块的内容，直到遇到 break 语句或者 switch 语句块结束</li><li>把功能相同的case语句合并起来，如:<pre><code> case 1: case 2:     system.out.println("1024")</code></pre></li><li>default块可以出现在任意位置，也可以省略</li></ol></blockquote><h4 id="3-6-循环语句"><a href="#3-6-循环语句" class="headerlink" title="3.6 循环语句"></a>3.6 循环语句</h4><h5 id="3-6-1-循环语句之while"><a href="#3-6-1-循环语句之while" class="headerlink" title="3.6.1 循环语句之while"></a>3.6.1 循环语句之while</h5><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>判断条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    操作代码块<span class="token punctuation">}</span></code></pre><p>执行过程：<br>1.判断while后面的条件是否成立<br>2.当条件成立时，执行循环内的操作代码，然后重复执行1和2，直到循环条件不成立为止<br>特点：<code>先判断，后执行</code></p><h5 id="3-6-2-循环语句之do…while"><a href="#3-6-2-循环语句之do…while" class="headerlink" title="3.6.2 循环语句之do…while"></a>3.6.2 循环语句之do…while</h5><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>    操作代码块<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>判断条件<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行过程：<br>1.先执行一遍操作代码，然后帕帕尼段循环条件是否成立<br>2.若条件成立，继续执行1和2，直到条件不成立为止<br>特点：<code>先执行，后判断</code></p><ul><li>do…while语句保证循环至少被执行一次！</li><li>安全性不高</li></ul><h5 id="3-6-3-循环语句之for"><a href="#3-6-3-循环语句之for" class="headerlink" title="3.6.3 循环语句之for"></a>3.6.3 循环语句之for</h5><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>循环变量初始化<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>循环变量变化<span class="token punctuation">)</span><span class="token punctuation">{</span>    操作代码块<span class="token punctuation">}</span></code></pre><p>执行过程：<br>1.执行循环变量初始化部分，设置循环的初始状态，此部分在整个循环中只执行一次<br>2.进行循环条件的判断，如果条件为 true ，则执行循环体内代码；如果为 false ，则直接退出循环<br>2.执行循环变量变化部分，改变循环变量的值，以便进行下一次条件判断<br>4.依次重新执行2.3.4，直到退出循环<br>特点：<code>相比 while 和 do...while 语句结构更加简洁易读</code></p><p>for循环小细节：</p><blockquote><ol><li>for 关键字后面括号中的三个表达式必须用 “;” 隔开，三个表达式都可以省略，但 “;” 不能省略<br> a.省略“循环变量初始化”，可以在 for 语句之前由赋值语句进行变量初始化操作<br> b.省略“循环条件”，可能会造成循环将一直执行下去，也就是我们常说的“死循环”现象<br> c.省略“循环变量变化”，可以在循环体中进行循环变量的变化</li><li>for 循环变量初始化和循环变量变化部分，可以是使用 “,” 同时初始化或改变多个循环变量的值</li><li>循环条件部分可以使用逻辑运算符组合的表达式，表示复杂判断条件，但一定注意运算的优先级</li></ol></blockquote><h5 id="3-6-4-循环跳转语句之break"><a href="#3-6-4-循环跳转语句之break" class="headerlink" title="3.6.4 循环跳转语句之break"></a>3.6.4 循环跳转语句之break</h5><p>Break:在switch中表示跳出switch结构。Break也可以在循环中出现，表示跳出整个循环。<br>用法示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过break结束循环，执行循环后的语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="3-6-5-循环跳转语句之continue"><a href="#3-6-5-循环跳转语句之continue" class="headerlink" title="3.6.5 循环跳转语句之continue"></a>3.6.5 循环跳转语句之continue</h5><p>Continue:只能在循环结构中出现。表示结束本次循环，执行循环下一次。<br>用法示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过continue结束本次循环，直接进行下一次循环</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h3><h4 id="4-1-一维数组"><a href="#4-1-一维数组" class="headerlink" title="4.1 一维数组"></a>4.1 一维数组</h4><p>数组中存储是一连串连续的空间，要求里面的数据类型是一致的。<br>数组的长度一旦确定了，便无法改变，除非手动扩容。<br>数组里面的数据必须顺序存储。</p><ul><li>声明方式：<ul><li>数据类型[] 数组名 = null;</li><li><code>int[] a;</code></li><li><code>double []b;</code></li><li><code>Mydate c[];</code><br>注：方括号可写到变量名前，也可写到变量名后</li></ul></li><li>数组初始化：<ul><li><code>int[] a = new int[3]</code>      分配3个空间</li><li><code>a[0]=1;  a[1]=2;   a[2]=3;</code><br>注：<code>数组定义与为数组分配空间分开进行</code></li></ul></li><li>数组静态初始化：<ul><li><code>int[] a={1,2,3};</code>   或</li><li><code>int[] a=new int[]{1,2,3};</code></li></ul></li><li>数组元素的引用：<br>每个数组都有个属性length指明其长度<br>例：ages.length指明数组a的长度, <code>for(int i=0;i&lt;ages.length;i++)</code></li><li>内存图<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015110957.png" alt=""></li></ul><h4 id="4-2-二维数组"><a href="#4-2-二维数组" class="headerlink" title="4.2 二维数组"></a>4.2 二维数组</h4><p>声明方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明格式</span>数组可写为：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>不可写为：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="4-3-内存图分析"><a href="#4-3-内存图分析" class="headerlink" title="4.3 内存图分析"></a>4.3 内存图分析</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015111140.png" alt=""></p><h4 id="4-4-数组赋值的常用方法"><a href="#4-4-数组赋值的常用方法" class="headerlink" title="4.4 数组赋值的常用方法"></a>4.4 数组赋值的常用方法</h4><ol><li>for循环，效率最低</li><li><code>System.arraycopy()</code> 效率最高</li><li><code>Arrays.copyOf()</code> 效率次于第二种方法</li><li><code>Object.clone()</code> 效率次于第二种和第三种</li></ol><h4 id="4-5-java-util-Arrays类的相关方法介绍"><a href="#4-5-java-util-Arrays类的相关方法介绍" class="headerlink" title="4.5 java.util.Arrays类的相关方法介绍"></a>4.5 java.util.Arrays类的相关方法介绍</h4><p>java.util.Arrays：jdk为我们提供针对数组操作的工具类<br> 常见方法 | 说明<br> —– | :—-:<br> sort   | 为数组排序<br> toString  | 将数组转换成字符串显示<br> fill(数组,value)   | 将数组里面元素使用value填充<br> copyOf(数组,长度) | 拷贝一份新的指定长度的数组<br> binarySearch | 查询元素在数组array中的下标，如果没有返回负数（用此方法前必须先排序）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶段性练手项目（一）</title>
      <link href="/posts/db86.html"/>
      <url>/posts/db86.html</url>
      
        <content type="html"><![CDATA[<h1 id="人机猜拳小游戏"><a href="#人机猜拳小游戏" class="headerlink" title="人机猜拳小游戏"></a>人机猜拳小游戏</h1><h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153204.png" alt=""></p><h2 id="2-功能拆分"><a href="#2-功能拆分" class="headerlink" title="2. 功能拆分"></a>2. 功能拆分</h2><h3 id="2-1-Player类"><a href="#2-1-Player类" class="headerlink" title="2.1 Player类"></a>2.1 Player类</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153401.png" alt=""></p><h3 id="2-2-Computer类"><a href="#2-2-Computer类" class="headerlink" title="2.2 Computer类"></a>2.2 Computer类</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153542.png" alt=""></p><h3 id="2-3-Game类和实现菜单"><a href="#2-3-Game类和实现菜单" class="headerlink" title="2.3 Game类和实现菜单"></a>2.3 Game类和实现菜单</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153620.png" alt=""></p><h3 id="2-4-实现多局对战并统计得分"><a href="#2-4-实现多局对战并统计得分" class="headerlink" title="2.4 实现多局对战并统计得分"></a>2.4 实现多局对战并统计得分</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153704.png" alt=""></p><h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3. 源代码"></a>3. 源代码</h2><h3 id="3-1-Player类"><a href="#3-1-Player类" class="headerlink" title="3.1 Player类"></a>3.1 Player类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    Scanner input<span class="token punctuation">;</span>    <span class="token keyword">public</span> String pName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"剪刀"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"石头"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> pNum <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">"布"</span> <span class="token operator">:</span> <span class="token string">"输入有误！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-Computer类"><a href="#3-2-Computer类" class="headerlink" title="3.2 Computer类"></a>3.2 Computer类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String cName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cNum <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"剪刀"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"石头"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cNum <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">"布"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-Game类、实现菜单、多局对战和统计得分"><a href="#3-3-Game类、实现菜单、多局对战和统计得分" class="headerlink" title="3.3 Game类、实现菜单、多局对战和统计得分"></a>3.3 Game类、实现菜单、多局对战和统计得分</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    Scanner input<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> roleNum<span class="token punctuation">;</span>    <span class="token keyword">public</span> String inputName<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    String gameS<span class="token punctuation">;</span>    String pFinger<span class="token punctuation">;</span>    String cFinger<span class="token punctuation">;</span>    Player player<span class="token punctuation">;</span>    Computer computer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------欢 迎 进 入 游 戏 世 界------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t***  猜拳游戏开始！  ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t*********************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出拳规则：1.剪刀，2.石头，3.布"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请选择对方角色（1.特朗普，2.普京，3.安倍晋三）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入你的姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"   VS  "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"是否开始？(y/n):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>gameS <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">judgeGameStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ERROR！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">=</span> <span class="token string">"特朗普"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">=</span> <span class="token string">"普京"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">=</span> <span class="token string">"安倍晋三"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputName<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">judgeGameStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whoWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平局"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"剪刀"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"石头"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"石头"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"布"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"布"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"剪刀"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------最终战况---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"   VS  "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对战次数："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n姓名\t得分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果：恭喜你！获得最终胜利"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果：很遗憾！你最终失败了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果：不错！至少平局了呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请出拳1.剪刀，2.石头，3.布："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pFinger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cFinger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span><span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"输入有误！"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"出拳："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">+</span> <span class="token string">"出拳："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"结果："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">whoWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n是否开始下一轮(y/n)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String keep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-测试类"><a href="#3-4-测试类" class="headerlink" title="3.4 测试类"></a>3.4 测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FingerGuess</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Game game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4. 测试结果"></a>4. 测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015154851.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础7. 工具类及常用算法</title>
      <link href="/posts/dd6e.html"/>
      <url>/posts/dd6e.html</url>
      
        <content type="html"><![CDATA[<h1 id="第7讲-工具类及常用算法"><a href="#第7讲-工具类及常用算法" class="headerlink" title="第7讲 工具类及常用算法"></a>第7讲 工具类及常用算法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第7讲主要讲述：Java语言基础类;字符串及日期;集合;排序与查找;泛型;常用算法</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Java语言基础类"><a href="#1-Java语言基础类" class="headerlink" title="1. Java语言基础类"></a>1. Java语言基础类</h3><h4 id="1-1-JDK-API"><a href="#1-1-JDK-API" class="headerlink" title="1.1 JDK API"></a>1.1 JDK API</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200306170925.png" alt=""></p><h4 id="1-2-Java基础类库"><a href="#1-2-Java基础类库" class="headerlink" title="1.2 Java基础类库"></a>1.2 Java基础类库</h4><table><thead><tr><th align="right">类库名</th><th align="center">类库功能</th></tr></thead><tbody><tr><td align="right">java.lang</td><td align="center">Java语言的核心类库，java自动导入</td></tr><tr><td align="right">java.util</td><td align="center">实用工具类</td></tr><tr><td align="right">java.io</td><td align="center">标准输入/输出类库</td></tr><tr><td align="right">java.awt、javax.swing</td><td align="center">图形用户界面(GUI)的类库</td></tr><tr><td align="right">java.net</td><td align="center">网络功能的类库</td></tr><tr><td align="right">java.sql</td><td align="center">数据库访问的类库</td></tr></tbody></table><h4 id="1-3-JDK-API文档"><a href="#1-3-JDK-API文档" class="headerlink" title="1.3 JDK API文档"></a>1.3 JDK API文档</h4><p><a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">在线查阅地址</a><br><a href="http://www.oracle.com/technetwork/java/javase/documentation/jdk-doc-downloads-2133158.html" target="_blank" rel="noopener">文档下载地址</a></p><h4 id="1-4-Object类"><a href="#1-4-Object类" class="headerlink" title="1.4 Object类"></a>1.4 Object类</h4><ul><li>Object类是所有类的直接或间接父类</li><li>让所有的类有了一致性</li></ul><h5 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h5><p>==表示引用是否相当，equals表示内容是否相等，例：</p><pre class=" language-java"><code class="language-java">Integer one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer anthoerOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>one<span class="token operator">==</span>anotherOne<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//false</span><span class="token keyword">if</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>anotherOne<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//true</span></code></pre><p>如果覆盖equals()方法，一般也要覆盖hashCode()方法</p><h5 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h5><p><code>getClass()</code>方法是final方法，不能被重载</p><h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h5><ul><li><code>toString()</code>方法用来返回对象的字符串表示</li><li>常用于显示，例：<code>System.out.prinln(person);</code></li><li>另外，用于字符串的加号，例：”current person is”+person</li><li>通过重载<code>toString()</code>方法，可以适当地显示对象的信息以进行调试</li></ul><h4 id="1-5-基本数据类型的包装类"><a href="#1-5-基本数据类型的包装类" class="headerlink" title="1.5 基本数据类型的包装类"></a>1.5 基本数据类型的包装类</h4><p>与8中基本数据类型相对应，基本数据类型的包装类也有8中，分别是：<br><code>Character,Byte,Short,Integer,Long,Float,Double,Boolean</code><br>注意：首字母要大写</p><h4 id="1-6-包装类的特点"><a href="#1-6-包装类的特点" class="headerlink" title="1.6 包装类的特点"></a>1.6 包装类的特点</h4><ol><li>这些类都提供了一些常数<ul><li>如<code>Integer.MAX_VALUE</code>(整数最大值),<code>Double.NaN</code>(非数字)等</li></ul></li><li>提供了<code>valueOf(String),toString()</code><ul><li>用于从字符串转换及转换成字符串</li></ul></li><li>通过xxxxValue()方法可以得到所包装的值<ul><li>Integer对象的<code>intValue()</code>方法</li></ul></li><li>对象中所包装的值是不可改变的(immutable)<ul><li>要改变对象中的值只有重新生成新的对象</li></ul></li><li><code>toString(),equals()</code>等方法进行了覆盖</li></ol><h4 id="1-7-Math类"><a href="#1-7-Math类" class="headerlink" title="1.7 Math类"></a>1.7 Math类</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200306191455.png" alt=""></p><h4 id="1-8-System类"><a href="#1-8-System类" class="headerlink" title="1.8 System类"></a>1.8 System类</h4><p>在Java中，系统属性可以通过换几个变量获得<br><code>System.getProperty(String name)</code>方法获得特定的系统属性值<br><code>System.getPropertier()</code>方法获得一个Properties类的对象，其中包含了所有可用的系统属性信息</p><h3 id="2-字符串及日期"><a href="#2-字符串及日期" class="headerlink" title="2. 字符串及日期"></a>2. 字符串及日期</h3><h4 id="2-1-字符串"><a href="#2-1-字符串" class="headerlink" title="2.1 字符串"></a>2.1 字符串</h4><p>String类：创建之后不会再做修改和变动<br>StringBuffer、StringBuilder类：创建之后允许再做更改和变化<br>注意：在循环中使用String的+=运算可能会带来效率问题</p><h4 id="2-2-String类"><a href="#2-2-String类" class="headerlink" title="2.2 String类"></a>2.2 String类</h4><p>String类对象保存不可修改(immutable)的Unicode字符序列<br><code>String类的下述方法能创建并返回一个新的String对象实例</code>：</p><table><thead><tr><th align="right">方法名</th><th align="center">方法的功能</th></tr></thead><tbody><tr><td align="right">concat</td><td align="center">连接</td></tr><tr><td align="right">replace</td><td align="center">替换</td></tr><tr><td align="right">replaceAll</td><td align="center">替换全部</td></tr><tr><td align="right">substring</td><td align="center">字符串</td></tr><tr><td align="right">toLowerCase</td><td align="center">变成小写</td></tr><tr><td align="right">toUpperCase</td><td align="center">变成大写</td></tr><tr><td align="right">trim</td><td align="center">去掉前后空格</td></tr><tr><td align="right">toString</td><td align="center">变成字符串</td></tr></tbody></table><ul><li><p><code>查找</code>：</p><table><thead><tr><th align="right">方法名</th><th align="center">方法的功能</th></tr></thead><tbody><tr><td align="right">endsWith</td><td align="center">是不是以什么结尾</td></tr><tr><td align="right">startsWith</td><td align="center">是不是以什么开头</td></tr><tr><td align="right">indexOf</td><td align="center">再找一个字符串在其中的位置</td></tr><tr><td align="right">lastIndexOf</td><td align="center">查找字符串最后一次出现的位置</td></tr></tbody></table></li><li><p><code>比较</code>：</p><table><thead><tr><th align="right">方法名</th><th align="center">方法的功能</th></tr></thead><tbody><tr><td align="right">equals</td><td align="center">两个字符串进行比较</td></tr><tr><td align="right">equalsIgnoreCase</td><td align="center">忽略大小写来比较</td></tr></tbody></table></li><li><p><code>字符及长度</code>：</p><table><thead><tr><th align="right">方法名</th><th align="center">方法的功能</th></tr></thead><tbody><tr><td align="right">charAt</td><td align="center">字符在第几个位置</td></tr><tr><td align="right">length</td><td align="center">计算字符串长度</td></tr></tbody></table></li></ul><h4 id="2-3-字符串常量"><a href="#2-3-字符串常量" class="headerlink" title="2.3 字符串常量"></a>2.3 字符串常量</h4><p>除了不可修改(immutable)特点外，还要注意String常量的内部化(interned)问题，即同样的字符串常量是合并的。</p><h4 id="2-4-StringBuffer类"><a href="#2-4-StringBuffer类" class="headerlink" title="2.4 StringBuffer类"></a>2.4 StringBuffer类</h4><p>StringBuffer类对象保存可修改的Unicode字符序列<br>Stringbuilder类似，其效率更高，但不考虑线程安全性<br>构造方法：</p><ul><li><code>StringBuffer()</code></li><li><code>StringBuffer(int capacity)</code></li><li><code>StringBuffer(String initialString)</code><br>实现修改操作的方法：<table><thead><tr><th align="right">方法名</th><th align="center">方法的功能</th></tr></thead><tbody><tr><td align="right">append</td><td align="center">追加</td></tr><tr><td align="right">insert</td><td align="center">插入</td></tr><tr><td align="right">reverse</td><td align="center">前后反转</td></tr><tr><td align="right">setCharAt</td><td align="center">修改其中一个字符</td></tr><tr><td align="right">setLength</td><td align="center">设定字符串长度</td></tr></tbody></table></li></ul><h4 id="2-5-字符串的分割"><a href="#2-5-字符串的分割" class="headerlink" title="2.5 字符串的分割"></a>2.5 字符串的分割</h4><p>java.util.StringToken类提供了对字符串进行分割的功能<br>构造方法：<br><code>StringTokenizer(String str,String delim);</code><br>该类的重要方法有：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//分割串的个数</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//是否还有分割串</span><span class="token keyword">public</span> String <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//得到下一 分割串</span></code></pre><h4 id="2-6-日期"><a href="#2-6-日期" class="headerlink" title="2.6 日期"></a>2.6 日期</h4><pre class=" language-java"><code class="language-java"><span class="token operator">-</span> Calendar    <span class="token operator">-</span> 得到一个实例：Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//Locale.ZH</span>    <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>DAY_OF_MOUTH<span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>DAY_OF_WEEK<span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token punctuation">.</span>set       <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>HOUR<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span>MONTH<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> Date    <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">daate</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currenTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>   <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token operator">:</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss"<span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token punctuation">.</span>format          <span class="token operator">-</span> <span class="token punctuation">.</span>parse</code></pre><h4 id="2-7-Java8中的Time-API"><a href="#2-7-Java8中的Time-API" class="headerlink" title="2.7 Java8中的Time API"></a>2.7 Java8中的Time API</h4><ul><li><code>java.time.*</code></li><li><code>java.time.format.*</code></li><li>主要的类：<ul><li>Instant  时刻，Clock  时区，Duration   时间段</li><li>常用的类 LocalDateTime，LocalDate，LocalTime</li><li>DateTimeFormatter</li></ul></li></ul><h3 id="3-集合"><a href="#3-集合" class="headerlink" title="3. 集合"></a>3. 集合</h3><h4 id="3-1-Collection-API"><a href="#3-1-Collection-API" class="headerlink" title="3.1 Collection API"></a>3.1 Collection API</h4><ul><li>提供“集合”的功能</li><li>包含一系列的接口和类</li></ul><h4 id="3-2-Collection-API包含的三大类"><a href="#3-2-Collection-API包含的三大类" class="headerlink" title="3.2 Collection API包含的三大类"></a>3.2 Collection API包含的三大类</h4><ul><li>Collection接口：有两个子接口(List表，Set集)<ul><li>List：(Collection的子接口)记录元素的保存顺序，且允许有重复元素</li><li>Set：(Collection的子接口)不记录元素的保存顺序，且不允许有重复元素</li></ul></li><li>Map接口，即映射<ul><li>键-值对(Key-value pair)的集合</li></ul></li></ul><h4 id="3-3-Collection接口"><a href="#3-3-Collection接口" class="headerlink" title="3.3 Collection接口"></a>3.3 Collection接口</h4><table><thead><tr><th align="right">名称</th><th align="center">类型</th><th align="left">方法的功能</th></tr></thead><tbody><tr><td align="right">+add(element:Object)</td><td align="center">boolean</td><td align="left">增加</td></tr><tr><td align="right">+remove(element:Object)</td><td align="center">boolean</td><td align="left">减少</td></tr><tr><td align="right">+size()</td><td align="center">int</td><td align="left">个数</td></tr><tr><td align="right">+isEmpty()</td><td align="center">boolean</td><td align="left">判断是否为空</td></tr><tr><td align="right">+contains(element:Object)</td><td align="center">boolean</td><td align="left">判断是否包含某元素</td></tr><tr><td align="right">+iterator</td><td align="center">Iterator</td><td align="left">对接口内元素进行遍历迭代</td></tr></tbody></table><h4 id="3-4-Collection层次结构"><a href="#3-4-Collection层次结构" class="headerlink" title="3.4 Collection层次结构"></a>3.4 Collection层次结构</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200306193027.png" alt=""></p><h4 id="3-5-List"><a href="#3-5-List" class="headerlink" title="3.5 List"></a>3.5 List</h4><p>List接口：线性表(linear list)<br>主要的实现类：ArrayList.LinkedList，及早期的Vector<br>List接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>    E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="3-6-Iterator"><a href="#3-6-Iterator" class="headerlink" title="3.6 Iterator"></a>3.6 Iterator</h4><p>迭代器Iterator(所有的Collection都能产生)</p><ul><li><code>Iterator iterator = iterable.iterator();</code></li><li><code>while(iterator.hasNext())</code>     <code>doSomething(iterator.next());</code><br>增强的for语句<br>在JDK1.5以后，增强的for语句(enhanced for)或叫for-each,例：<pre class=" language-java"><code class="language-java">格式：<span class="token keyword">for</span><span class="token punctuation">(</span>Element e <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>例子：<span class="token keyword">for</span><span class="token punctuation">(</span>Photo photo <span class="token operator">:</span> album<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  编译器生成了Iterator的<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-7-Stack栈"><a href="#3-7-Stack栈" class="headerlink" title="3.7 Stack栈"></a>3.7 Stack栈</h4></li><li>遵循<code>”后进先出“(Last in First out，LIFO)</code>原则</li><li>重要线性数据结构</li><li>包含三个方法：<ul><li><code>public Object push(Object item)</code>：将指定对象压入栈中</li><li><code>public Object pop()</code>：将栈最上面的元素从栈中取出，并返回这个对象</li><li><code>public boolean empty()</code>：判断栈中有无对象元素</li></ul></li></ul><h4 id="3-8-Queue队列"><a href="#3-8-Queue队列" class="headerlink" title="3.8 Queue队列"></a>3.8 Queue队列</h4><ul><li>遵循<code>“先进先出”(First in First out，FIFO)</code>原则</li><li>重要线性数据结构</li><li>固定在一端输入数据（称为入队），另一端输出数据（称为出队）</li><li>重要的实现是LinkedList类，类的方法：<table><thead><tr><th align="right"></th><th align="center">可抛出异类的</th><th align="left">返回元素的</th></tr></thead><tbody><tr><td align="right">Insert(插入)</td><td align="center">add( e )</td><td align="left">offer( e )</td></tr><tr><td align="right">Remove(移除)</td><td align="center">remove()</td><td align="left">poll()</td></tr><tr><td align="right">Examine(检查)</td><td align="center">element()</td><td align="left">peek()</td></tr></tbody></table></li></ul><h4 id="3-9-几个早期的类或接口"><a href="#3-9-几个早期的类或接口" class="headerlink" title="3.9 几个早期的类或接口"></a>3.9 几个早期的类或接口</h4><ul><li>Vector，现多用ArrayList<ul><li>相当于动态数组，elementAt</li></ul></li><li>Stack，现多用LinkedList<ul><li>Stack是Vector的子类，push，pop，peek</li></ul></li><li>Hashtable，现多用HashMap<ul><li>Hashtable实现Map接口，参见Properties类</li></ul></li><li>Enumeration，现多用Iterator<ul><li>Enumeration用另一种方式实现Iterator的功能</li></ul></li></ul><h4 id="3-10-Set集"><a href="#3-10-Set集" class="headerlink" title="3.10 Set集"></a>3.10 Set集</h4><ul><li>两个重要的实现HashSet及TreeSet</li><li>其中TreeSet的底层是用TreeMap来实现的</li><li>Set中的对象不重复，即：hashCode()不等</li></ul><h4 id="3-11-Map"><a href="#3-11-Map" class="headerlink" title="3.11 Map"></a>3.11 Map</h4><ul><li>Map是键-值对的集合<ul><li>其中可以取到entrySet()、keySet()、values()</li><li>Map.entry是一个嵌套接口</li></ul></li><li>Map类的重要实现：<ul><li>HashMap类</li><li>TreeMap类：用红黑树的算法</li></ul></li></ul><h4 id="3-12-Map层次结构"><a href="#3-12-Map层次结构" class="headerlink" title="3.12 Map层次结构"></a>3.12 Map层次结构</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200306193048.png" alt=""></p><h3 id="4-排序与查找"><a href="#4-排序与查找" class="headerlink" title="4. 排序与查找"></a>4. 排序与查找</h3><h4 id="4-1-自编及已有"><a href="#4-1-自编及已有" class="headerlink" title="4.1 自编及已有"></a>4.1 自编及已有</h4><p>自编程序排序与查找：冒泡排序、选择排序、快速排序等<br>系统已有的排序与查找：Arrays类及Collections类</p><h4 id="4-2-Arrays类"><a href="#4-2-Arrays类" class="headerlink" title="4.2 Arrays类"></a>4.2 Arrays类</h4><ul><li>Arrays类是用于对数组进行排序和搜索的类<ul><li><code>Arrays.asList(10,7,6,5,9)</code>方法可以直接得到一个List对象</li></ul></li><li>Arrays类提供了sort()和binarySearch()</li><li>执行binarySearch()前应调用sor()，如：<code>public static void sort(List list);</code></li></ul><h4 id="4-3-比较"><a href="#4-3-比较" class="headerlink" title="4.3 比较"></a>4.3 比较</h4><ul><li>要么对象是java.lang.Comparable<pre class=" language-java"><code class="language-java">  实现方法  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li>要么提供一个java.lang.Comparator<ul><li>实现方法 <code>publicint compare(T o1,T o2)</code></li><li>这些方法的含义要与equals不冲突</li></ul></li></ul><h4 id="4-4-Collections类"><a href="#4-4-Collections类" class="headerlink" title="4.4 Collections类"></a>4.4 Collections类</h4><ul><li>此类完全由在collection上进行操作静态方法组成，如sort、binarySearch及reverse等</li><li>更一般地，使用Lambda表达式(Java8以上)</li></ul><h3 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5. 泛型(*)"></a>5. 泛型(*)</h3><h4 id="5-1-泛型"><a href="#5-1-泛型" class="headerlink" title="5.1 泛型"></a>5.1 泛型</h4><ul><li>泛型(Generic)是JDK1.5增加的最重要的Java语言特性</li><li>使用泛型可以针对不同的类有相同的处理方法</li><li>使用泛型的好处：类型更安全；适用更广泛，针对不同的类有相同的处理办法，但这些类之间不一定有继承关系</li><li>自定义泛型：可自定义泛型类，自定义泛型方法(&lt;&gt;要写到的前面)</li></ul><h4 id="5-2-对泛型的限定"><a href="#5-2-对泛型的限定" class="headerlink" title="5.2 对泛型的限定"></a>5.2 对泛型的限定</h4><ul><li>使用：？<ul><li>如Collections的reverse方法</li><li><code>reverse(List&lt;?&gt; list)</code></li></ul></li><li>使用：extends<ul><li>如Set的addAll方法</li><li><code>addAll(Collection&lt;? extends E&gt;col)</code></li></ul></li><li>使用：super<ul><li>如Collections的fill方法</li><li><code>fill(List&lt;? super T&gt;list,T obj)</code></li></ul></li></ul><h3 id="6-常用算法"><a href="#6-常用算法" class="headerlink" title="6. 常用算法"></a>6. 常用算法</h3><h4 id="6-1-遍试-穷举，exhaust-algorithm"><a href="#6-1-遍试-穷举，exhaust-algorithm" class="headerlink" title="6.1 遍试(穷举，exhaust algorithm)"></a>6.1 遍试(穷举，exhaust algorithm)</h4><p>在有限的范围内，可以对所有的值都进行试验和判断，从而找到满足条件的值<br>遍试算法的基本模式：<code>for( ; ; ){ if(); }</code></p><h4 id="6-2-迭代-iterative-algorithm"><a href="#6-2-迭代-iterative-algorithm" class="headerlink" title="6.2 迭代(iterative algorithm)"></a>6.2 迭代(iterative algorithm)</h4><p>多次利用同一公式进行计算，每次将计算结果再带入公式进行计算，从而逐步逼近精确解<br>迭代算法的基本模式：<code>while() { x = f(x); }</code></p><h4 id="6-3-递归-recursive"><a href="#6-3-递归-recursive" class="headerlink" title="6.3 递归(recursive)"></a>6.3 递归(recursive)</h4><p>本质是一个过程调用过程本身，在递归调用中，一个过程执行的某一步要用到它之前几步的结果<br>递归算法的基本模式：<code>f(n){ f(n-1); }</code></p><h4 id="6-4-回溯-试探回溯法，back-track"><a href="#6-4-回溯-试探回溯法，back-track" class="headerlink" title="6.4 回溯(试探回溯法，back-track)"></a>6.4 回溯(试探回溯法，back-track)</h4><p>先选择某一可能的线索进行试探，每一步试探都有多种方式，将每一方式都一一试探，如果不符合条件就返回纠正，反复进行这种试探再返回纠正，直到得出全部符合条件的答案或是问题无解为止<br>回溯算法的基本模式：<code>x++; if(…) x--;</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础2. 简单的Java程序</title>
      <link href="/posts/2f1b.html"/>
      <url>/posts/2f1b.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2讲-简单的Java程序"><a href="#第2讲-简单的Java程序" class="headerlink" title="第2讲 简单的Java程序"></a>第2讲 简单的Java程序</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第2讲主要讲述：Java程序的类型与基本构成，开发Java程序的基本步骤及在程序中进行输入输出</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Java程序的类型与基本构成"><a href="#1-Java程序的类型与基本构成" class="headerlink" title="1. Java程序的类型与基本构成"></a>1. Java程序的类型与基本构成</h3><ul><li>package语句：package包，表明源程序位于什么路径下(0或1句)</li><li>import语句：导入其他类(0或多句)</li><li>类定义class：可以有多个class类，但一个文件只能有一个public类(与文件同名)</li></ul><h3 id="2-开发Java程序的基本步骤"><a href="#2-开发Java程序的基本步骤" class="headerlink" title="2. 开发Java程序的基本步骤"></a>2. 开发Java程序的基本步骤</h3><h4 id="2-1-JDK安装后的文件夹"><a href="#2-1-JDK安装后的文件夹" class="headerlink" title="2.1 JDK安装后的文件夹"></a>2.1 JDK安装后的文件夹</h4><table><thead><tr><th>文件夹名</th><th align="center">存放的文件类型</th></tr></thead><tbody><tr><td>Bin</td><td align="center">存放工具文件</td></tr><tr><td>Demo</td><td align="center">存放一些示例文件</td></tr><tr><td>Jre</td><td align="center">存放与Java运行环境相关的文件</td></tr><tr><td>Include</td><td align="center">存放与C相关的头文件</td></tr><tr><td>Lib</td><td align="center">存放程序库</td></tr><tr><td>Db</td><td align="center">数据库相关</td></tr></tbody></table><h4 id="2-2-Java的API文档"><a href="#2-2-Java的API文档" class="headerlink" title="2.2 Java的API文档"></a>2.2 Java的API文档</h4><ul><li>英文在线文档：<a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">文档链接</a></li><li>中文在线文档：<a href="http://www.matools.com/api/java8" target="_blank" rel="noopener">文档链接</a></li><li>中文文档下载：<a href="https://pan.baidu.com/s/1oL-B0fUgfnCWOA_TcxyUeQ" target="_blank" rel="noopener">百度云下载链接</a>,提取码：ycqb<ul><li>注：尽可能多去看API英文文档</li></ul></li></ul><h3 id="3-程序中进行输入与输出"><a href="#3-程序中进行输入与输出" class="headerlink" title="3. 程序中进行输入与输出"></a>3. 程序中进行输入与输出</h3><h4 id="3-1-文本界面"><a href="#3-1-文本界面" class="headerlink" title="3.1 文本界面"></a>3.1 文本界面</h4><ul><li>java.util.Scanner类<ul><li>整数：Integer.parseInt(s);      </li><li>实数：Double.parseDouble(s);    <pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> test00<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test00</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Please input a number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>"<span class="token operator">%</span>d的平方是<span class="token operator">%</span>d\n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="3-2-图形界面"><a href="#3-2-图形界面" class="headerlink" title="3.2 图形界面"></a>3.2 图形界面</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> test00<span class="token punctuation">;</span>improt java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> calss test00<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AppFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AppFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">{</span>    JTextField in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"求平方"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JLable out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"用于显示结果的标签"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">AppFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        String s <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sq <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token string">"的平方根是："</span><span class="token operator">+</span>sq<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>运行后：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228141615.png" alt=""></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode.01 两数之和</title>
      <link href="/posts/6630.html"/>
      <url>/posts/6630.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-原题目"><a href="#1-原题目" class="headerlink" title="1. 原题目"></a>1. 原题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例：</p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><h2 id="2-第一遍解法"><a href="#2-第一遍解法" class="headerlink" title="2. 第一遍解法"></a>2. 第一遍解法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-网上的优解"><a href="#3-网上的优解" class="headerlink" title="3. 网上的优解"></a>3. 网上的优解</h2><h3 id="3-1-两遍哈希表"><a href="#3-1-两遍哈希表" class="headerlink" title="3.1 两遍哈希表"></a>3.1 两遍哈希表</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-一遍哈希表"><a href="#3-2-一遍哈希表" class="headerlink" title="3.2 一遍哈希表"></a>3.2 一遍哈希表</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-自己可改进的地方"><a href="#4-自己可改进的地方" class="headerlink" title="4. 自己可改进的地方"></a>4. 自己可改进的地方</h2><p>待补充</p><h2 id="5-改进至最优解"><a href="#5-改进至最优解" class="headerlink" title="5. 改进至最优解"></a>5. 改进至最优解</h2><p>待补充</p><h2 id="6-获得的思考"><a href="#6-获得的思考" class="headerlink" title="6. 获得的思考"></a>6. 获得的思考</h2><p>待补充</p><h2 id="附：题目及解法参考来源"><a href="#附：题目及解法参考来源" class="headerlink" title="附：题目及解法参考来源"></a>附：题目及解法参考来源</h2><p><a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">力扣LeetCode</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 每日LeetCode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中爬取豆瓣问题</title>
      <link href="/posts/6a56.html"/>
      <url>/posts/6a56.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>Hexo中爬取豆瓣书单影单后，图片一直在加载的问题，如下图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200229164830.png" alt=""></p><h3 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h3><p>开启了<code>懒加载</code>导致书单影单封面一直在加载</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h3><p>将只对文章图片进行懒加载赋值<code>true</code>即可</p><h5 id="问题解决参考来源"><a href="#问题解决参考来源" class="headerlink" title="问题解决参考来源"></a>问题解决参考来源</h5><p>Hexo交流群里的以为热心群友</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题记录及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录及解决 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【鬼灭/踩点/燃向】日之呼吸 肆之型 无惨陪我晒太阳</title>
      <link href="/posts/4a18.html"/>
      <url>/posts/4a18.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>BGM：Whatever It Takes-Imagine Dragons<br>属于二稿，把上次初稿重新改了下，还算满意<br>目前还明显不足的是不会在有人声的BGM里提取台词和斩击音效</p><h3 id="开始观看"><a href="#开始观看" class="headerlink" title="开始观看"></a>开始观看</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=88759729&amp;cid=151624262&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视频剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【鬼灭/踩点】我和祢豆子的羁绊是谁都无法斩断的！</title>
      <link href="/posts/5e6b.html"/>
      <url>/posts/5e6b.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>BGM：Whatever It Takes-Imagine Dragons<br>看完别人剪的鬼灭踩点视频心里痒痒<br>于是也花了两天时间试了下<br>最后出了这个初稿作品</p><h3 id="开始观看"><a href="#开始观看" class="headerlink" title="开始观看"></a>开始观看</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=87663698&amp;cid=149777335&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视频剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package小错误</title>
      <link href="/posts/34c1.html"/>
      <url>/posts/34c1.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228195144.png" alt=""></p><h3 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h3><p>已使用package包，但却未表明源程序位于什么路径下</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h3><p>在第一行添加代码：<code>package test00;</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题记录及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录及解决 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo解析出错问题</title>
      <link href="/posts/c6bf.html"/>
      <url>/posts/c6bf.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>在写Java基础知识笔记，使用<code>hexo g</code>生成文章时，出现如下报错：</p><pre><code>FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlNunjucks Error:  [Line 143, Column 15] expected variable end</code></pre><h3 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h3><p>在Hexo故障排除文档<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">文档链接</a>中发现问题原因：<br>当文章中同时才出现两个花括号<code>}}</code>时，且两个花括号未被代码块包含时，解析会出现问题(使用单`包含无作用)</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h3><p>使用特定代码将含有两个花括号的内容包含，如：</p><pre><code>{% raw %}Hello {{ sensitive }}       //同时出现两个花括号的内容{% endraw %}</code></pre><h5 id="问题解决参考来源"><a href="#问题解决参考来源" class="headerlink" title="问题解决参考来源"></a>问题解决参考来源</h5><p><a href="https://hexo.io/docs/troubleshooting" target="_blank" rel="noopener">Hexo官方故障排除文档</a><br><a href="https://www.jianshu.com/p/738ebe02029b" target="_blank" rel="noopener">Hexo的一个小BUG</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题记录及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录及解决 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础6. 异常处理与程序调试</title>
      <link href="/posts/1d72.html"/>
      <url>/posts/1d72.html</url>
      
        <content type="html"><![CDATA[<h1 id="第5讲-异常处理与程序调试"><a href="#第5讲-异常处理与程序调试" class="headerlink" title="第5讲 异常处理与程序调试"></a>第5讲 异常处理与程序调试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第6讲主要讲述：异常处理；自定义异常；断言及程序的测试；程序的调试</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1. 异常处理"></a>1. 异常处理</h3><h4 id="1-1-异常定义"><a href="#1-1-异常定义" class="headerlink" title="1.1 异常定义"></a>1.1 异常定义</h4><p>异常，对应着Java运行错误的处理机制</p><h5 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    语句组<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>    异常处理语句组<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h5><p>1.抛出(throw)异常<br>2.运行时系统在调用栈中查找<br>3.捕获(catch)异常的代码<br>相关语句：</p><pre class=" language-java"><code class="language-java">抛出异常：`<span class="token keyword">throw</span> 异常对象<span class="token punctuation">;</span>`捕获异常：<span class="token keyword">try</span><span class="token punctuation">{</span>    语句组<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 异常形式参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>    异常处理语句组<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 异常形式参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>    异常处理语句组<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    异常处理语句组<span class="token punctuation">;</span><span class="token punctuation">}</span>其中，<span class="token keyword">catch</span>语句可以是<span class="token number">0</span>或多个，可以没有fanally语句</code></pre><h4 id="1-2-异常分类"><a href="#1-2-异常分类" class="headerlink" title="1.2 异常分类"></a>1.2 异常分类</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228194514.png" alt=""><br>Error：JVM的错误<br>Exception：异常，其构造方法为：</p><ul><li><code>public Exception();</code></li><li><code>public Exception(String message);</code></li><li><code>Exception(String message,Throwable cause);</code></li></ul><h4 id="1-3-多异常处理"><a href="#1-3-多异常处理" class="headerlink" title="1.3 多异常处理"></a>1.3 多异常处理</h4><p>子类异常要写在父类异常前面<br>finally语句：无论是否有异常都要执行，即使其中有break,return等语句</p><h4 id="1-4-受检的异常"><a href="#1-4-受检的异常" class="headerlink" title="1.4 受检的异常"></a>1.4 受检的异常</h4><p>Exception分为两种：</p><ul><li>RuntimeException及其子类，可以不明确处理</li><li>否则，称为受检的异常(checked Exception)<br>受检的异常，要求明确进行语法处理：</li><li>要么捕获(catch)</li><li>要么抛出(throws)：在方法的签名后面用throws xxxx来声明</li></ul><h3 id="2-自定义异常"><a href="#2-自定义异常" class="headerlink" title="2. 自定义异常"></a>2. 自定义异常</h3><h4 id="2-1-创建用户自定义异常"><a href="#2-1-创建用户自定义异常" class="headerlink" title="2.1 创建用户自定义异常"></a>2.1 创建用户自定义异常</h4><p>继承自Exception类或某个子Exception类<br>定义属性和方法，或重载父类的方法</p><h4 id="2-2-重抛异常及异常链接"><a href="#2-2-重抛异常及异常链接" class="headerlink" title="2.2 重抛异常及异常链接"></a>2.2 重抛异常及异常链接</h4><p>对于异常，不仅要进行捕获处理，优势也要将此异常进一步传递给调用者，以便让调用者也能感受到这种异常，这时可以在catch语句块或finally语句块中采取以下三种方式：</p><ul><li>将当前捕获的异常再次抛出<ul><li><code>throw e;</code></li></ul></li><li>重新生成一个异常并抛出，如<ul><li><code>throw new Exception("some message");</code></li></ul></li><li>重新生成并抛出一个新异常，该异常中包含了当前异常的信息，如<ul><li><code>throw new Exception("some message",e);</code>可用<code>e.getCause()</code>得到内部异常</li></ul></li></ul><h3 id="3-断言及程序的测试"><a href="#3-断言及程序的测试" class="headerlink" title="3. 断言及程序的测试"></a>3. 断言及程序的测试</h3><h4 id="3-1-断言-assertion"><a href="#3-1-断言-assertion" class="headerlink" title="3.1 断言(assertion)"></a>3.1 断言(assertion)</h4><p>assert的写法：</p><ul><li><code>assert 表达式;</code></li><li><code>assert 表达式：信息;</code><br>例：<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Assertion</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">assert</span> <span class="token function">hypotenuse</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">5</span> <span class="token operator">:</span> <span class="token string">"算法不正确"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//assert写法</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">hypotenuse</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><code>调试程序时，若表达式部位true，则程序会产生异常并输出相关的错误信息</code></li></ul><h4 id="3-2-程序的测试及Junit"><a href="#3-2-程序的测试及Junit" class="headerlink" title="3.2 程序的测试及Junit"></a>3.2 程序的测试及Junit</h4><p>Eclipse中</p><ul><li>项目上右键-New-Junit Test Case</li><li>项目上右键-Run as-Junit Test</li></ul><h4 id="3-3-测试函数"><a href="#3-3-测试函数" class="headerlink" title="3.3 测试函数"></a>3.3 测试函数</h4><p><code>@Test</code>用来标注测试函数<br>测试中常用的语句：</p><ul><li><code>fail(信息);</code>             //表示程序出错</li><li><code>assertEquals(参数1,参数2);</code>      //表示程序要保证两个参数相等</li><li><code>assertNull(参数);</code>     //表示参数要为null</li></ul><h3 id="4-程序的调试"><a href="#4-程序的调试" class="headerlink" title="4. 程序的调试"></a>4. 程序的调试</h3><h4 id="4-1-程序中的错误"><a href="#4-1-程序中的错误" class="headerlink" title="4.1 程序中的错误"></a>4.1 程序中的错误</h4><p>程序中的错误，通常分为三大类：</p><ul><li>语法错误(Syntax error)<ul><li>编辑、编译器发现</li></ul></li><li>运行错误(Runtime error)<ul><li>异常处理机制</li></ul></li><li>逻辑错误(Logic error)<ul><li>调试(debug)、单元测试(unit test)</li></ul></li></ul><h4 id="4-2-程序的调试-debug"><a href="#4-2-程序的调试-debug" class="headerlink" title="4.2 程序的调试(debug)"></a>4.2 程序的调试(debug)</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>1.在IDE中，项目上右键，debug as…<br>2.进入到调试试图(debug perspective)</p><h5 id="调试的手段"><a href="#调试的手段" class="headerlink" title="调试的手段"></a>调试的手段</h5><ul><li>断点(breakpoint)：<ul><li>切换断点：鼠标右击编译器左边条；Eclipse快捷键：Ctrl+Shift+B</li></ul></li><li>跟踪(trace)：<ul><li>Eclipse快捷键</li><li>逐语句执行：F5</li><li>逐过程执行：F6</li><li>跳出函数：F7</li><li>运行到光标处：Ctrl+R</li></ul></li><li>监视(watch)<ul><li>即时监视：鼠标指向变量</li><li>快速监视：点右键，Inspector</li><li>添加监视：点右键，Watch</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础1. Java语言与面向对象的程序设计</title>
      <link href="/posts/7a13.html"/>
      <url>/posts/7a13.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1讲-Java语言与面向对象的程序设计"><a href="#第1讲-Java语言与面向对象的程序设计" class="headerlink" title="第1讲 Java语言与面向对象的程序设计"></a>第1讲 Java语言与面向对象的程序设计</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第1讲主要讲述：Java与C++的关系；Java程序的编译及运行；JDK、工具及一些小知识</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Java与C-的关系"><a href="#1-Java与C-的关系" class="headerlink" title="1. Java与C++的关系"></a>1. Java与C++的关系</h3><p>Java可以看做是C++做减法，取其精华去其糟粕，在Java中：</p><ul><li>无直接指针操作</li><li>自动内存管理</li><li>数据类型长度固定</li><li>不用头文件</li><li>不包含结构和联合</li><li>不支持宏</li><li>不用多重继承</li><li>无类外全局变量</li><li>无GOTO</li></ul><h3 id="2-Java程序的编译与运行"><a href="#2-Java程序的编译与运行" class="headerlink" title="2. Java程序的编译与运行"></a>2. Java程序的编译与运行</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015113635.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228125816.png" alt=""></p><h3 id="3-JDK及工具"><a href="#3-JDK及工具" class="headerlink" title="3. JDK及工具"></a>3. JDK及工具</h3><h4 id="3-1-JDK"><a href="#3-1-JDK" class="headerlink" title="3.1 JDK"></a>3.1 JDK</h4><ul><li>若要开发Java程序，则要下载JDK(Java开发包)：<a href="http://jaava.sun.com" target="_blank" rel="noopener">下载地址</a></li><li>若只运行Java程序，可只下载JRE(Java运行环境)：<a href="http://java.com" target="_blank" rel="noopener">下载地址</a></li></ul><h5 id="3-1-1-JDK安装"><a href="#3-1-1-JDK安装" class="headerlink" title="3.1.1 JDK安装"></a>3.1.1 JDK安装</h5><p>安装jdk，实际上就是将安装包里的文件复制到本地的过程。<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114052.png" alt=""><br>安装java运行时环境<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114200.png" alt=""></p><h5 id="3-1-2-设置环境变量"><a href="#3-1-2-设置环境变量" class="headerlink" title="3.1.2 设置环境变量"></a>3.1.2 设置环境变量</h5><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114459.png" alt=""><br>安装完毕后，必须设置环境变量：</p><ul><li>方式一：直接设置path路径：C:\Program Files\Java\jdk1.8.0_141\bin</li><li>方式二：JAVA_HOME:指向jdk的安装目录<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114441.png" alt=""></li></ul><h4 id="3-2-常见的三类开发环境"><a href="#3-2-常见的三类开发环境" class="headerlink" title="3.2 常见的三类开发环境"></a>3.2 常见的三类开发环境</h4><p>1.直接使用JDK</p><ul><li>Javac,java,appletViewer</li></ul><p>2.文本工具+调用JDK命令</p><ul><li>Sublime Text,Notepad++,UltraEdit,EditPlus</li><li>JCreator,Kawa,Freejava</li></ul><p>3.集成开发环境(IDE)</p><ul><li>Eclipse,NetBeans,IDEA</li><li>Jdeveloper,VisualAge for Java</li><li>Bluej(主要用于教学)</li></ul><h4 id="3-3-推荐的几款IDE"><a href="#3-3-推荐的几款IDE" class="headerlink" title="3.3 推荐的几款IDE"></a>3.3 推荐的几款IDE</h4><p>Eclipse(免费)：<a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a><br>NetBeans(免费)：<a href="http://java.sun.com" target="_blank" rel="noopener">下载地址</a><br>IntelliJ IDEA(开源版免费)：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">下载地址</a></p><h4 id="3-4-小知识"><a href="#3-4-小知识" class="headerlink" title="3.4 小知识"></a>3.4 小知识</h4><h5 id="3-4-1-转义字符"><a href="#3-4-1-转义字符" class="headerlink" title="3.4.1 转义字符"></a>3.4.1 转义字符</h5><table><thead><tr><th>常见方法</th><th align="center">说明</th><th align="center">Unicode值</th></tr></thead><tbody><tr><td>\b</td><td align="center">退格</td><td align="center">\u0008</td></tr><tr><td>\t</td><td align="center">制表</td><td align="center">\u0009</td></tr><tr><td>\n</td><td align="center">换行</td><td align="center">\u000a</td></tr><tr><td>\r</td><td align="center">回车</td><td align="center">\u000d</td></tr><tr><td>"</td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td>'</td><td align="center">单引号</td><td align="center">\u0027</td></tr></tbody></table><h5 id="3-4-2-注释"><a href="#3-4-2-注释" class="headerlink" title="3.4.2 注释"></a>3.4.2 注释</h5><p>注释主要给自己或者别人看的。<br>1、单行注释：<br>  //后面的都是注释的内容<br>2、多行注释：<br>  /*<br>  <em>注释的内容<br>  <em>/<br>3、文档注释：<br>  /</em></em><br>  *注释的内容<br>  */<br>注释：20行左右给一段说明即可</p><h5 id="3-4-3-编码规范"><a href="#3-4-3-编码规范" class="headerlink" title="3.4.3 编码规范"></a>3.4.3 编码规范</h5><p>标识符的命名规范（变量名、类名、方法名）<br>大驼峰：首字母大写，其后每个单词的首字母大写<br>小驼峰：首字母小写，其后每个单词的首字母大写<br>括号，代码的层次缩进问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用格式</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次是使用阿里云轻量服务器+WordPress搭建的第一个博客，但感觉自由度和可玩性不够高，于是转战GitHub pages+Hexo。由于其支持十分轻量方便的Markdown编辑器语言，而本人又是第一次接触该语言，于是搜集了并记录了些Markdown的常用写法，故在此留档。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>以下为Markdown常用写法</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><ul><li>使用符号：#<blockquote><p>#一级标题<br>##二级标题<br>###三级标题<br>####四级标题<br>#####五级标题<br>######六级标题<br>注：符号#和文本之间要保留一个字符的空格</p></blockquote></li><li>例：我楼下的列表俩字就是栗子</li></ul><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><ul><li>使用符号：-<blockquote><p>-文本1<br>-文本2<br>-文本3<br>有序列表可用1.,2.,3.等代替符号-来表示(???为什么我下面用了没实现)<br>注：符号#和文本之间要保留一个字符的空格</p></blockquote></li><li>例：<ol><li>我现在就是</li><li>是个栗</li><li>子</li></ol></li></ul><h3 id="3-链接和图片"><a href="#3-链接和图片" class="headerlink" title="3.链接和图片"></a>3.链接和图片</h3><ul><li>使用符号：!,[]和() <blockquote><p>插入链接格式：[] (),[]内填写文本信息，()内填写链接地址<br>插入图片格式：! [] ()，[]内留空，()内填写图片地址<br>注：各个符号间不留空</p></blockquote></li><li>例：<br>链接：<a href="https://leeyin98.com/posts/3eeb.html">原地TP</a><br>图片：<img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/logo.png" alt=""></li></ul><h3 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h3><ul><li>使用符号：&gt;<blockquote><p>模板：&gt; 文本信息，&gt;&gt; 文本信息<br>需要引用时，文字前添加符号&gt;即可，&gt;&gt;表示引用内再次引用<br>注：符号&gt;和文本要保留一个字符的空格</p></blockquote></li><li>例：<blockquote><p>我是一<br>个栗<br>子</p></blockquote></li></ul><h3 id="5-字体"><a href="#5-字体" class="headerlink" title="5.字体"></a>5.字体</h3><ul><li>使用符号： *<blockquote><p>粗体：用两个符号<em>包含一段文字<br>斜体：用一个符号</em>包含一段文字</p></blockquote></li><li>例：举个栗子，<em>我是斜体</em>，<strong>我是粗体</strong>。</li></ul><h3 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h3><ul><li>使用符号：`<blockquote><p>引用一行：用符号`包含语句<br>引用多行：将符号```置于代码的首行与末行,并在首行符号后指明所用的编程语言</p></blockquote></li><li>例：<br>  单行：<code>This is a chestnut</code><br>  多行：<pre class=" language-java"><code class="language-java">  This     is       a        chestnut</code></pre></li></ul><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h3><ul><li>使用符号：|，-和:<blockquote><ul><li>第二行分割表头和内容。<br>有一个-就行，为了对齐，多加了几个</li><li>文字默认居左<br>两边加 ：表示文字居中<br>右边加 ：表示文字居右</li><li>文字和符号前要留个字符的空格</li></ul></blockquote></li><li>例：<table><thead><tr><th>栗子No.x</th><th align="center">优点</th><th align="right">价格</th></tr></thead><tbody><tr><td>栗子No.0</td><td align="center">又长又宽</td><td align="right">$1024</td></tr><tr><td>栗子No.1</td><td align="center">又大又圆</td><td align="right">$512</td></tr><tr><td>栗子No.2</td><td align="center">好吃</td><td align="right">$256</td></tr></tbody></table></li></ul><h3 id="附：参考来源"><a href="#附：参考来源" class="headerlink" title="附：参考来源"></a>附：参考来源</h3><p><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">Markdown编辑器语法指南</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
