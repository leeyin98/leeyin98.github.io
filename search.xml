<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java笔记9. 面向对象的设计原则</title>
      <link href="/posts/7cf.html"/>
      <url>/posts/7cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="第9讲-面向对象的设计原则"><a href="#第9讲-面向对象的设计原则" class="headerlink" title="第9讲 面向对象的设计原则"></a>第9讲 面向对象的设计原则</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第9讲主要讲述：类与类之间的关系；开闭原则；单一职责；里式替换原则；依赖倒转原则；接口隔离原则等</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记8. 内部类</title>
      <link href="/posts/11b9.html"/>
      <url>/posts/11b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="第8讲-内部类"><a href="#第8讲-内部类" class="headerlink" title="第8讲 内部类"></a>第8讲 内部类</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第8讲主要讲述：内部类的好处；内部类的分类；普通内部类；静态内部类；私有内部类；方法内部类；匿名内部类</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记7. 常用类</title>
      <link href="/posts/dd6e.html"/>
      <url>/posts/dd6e.html</url>
      
        <content type="html"><![CDATA[<h1 id="第7讲-异常处理与类的生命周期"><a href="#第7讲-异常处理与类的生命周期" class="headerlink" title="第7讲 异常处理与类的生命周期"></a>第7讲 异常处理与类的生命周期</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第7讲主要讲述：包装类；Math；Random；String；StringBuffer；Object；日期操作；System</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-包装类"><a href="#1-包装类" class="headerlink" title="1. 包装类"></a>1. 包装类</h3><p>包装类的继承结构<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018145103.png" alt=""><br>栗子1：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>in<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个包装类型的对象</span>        Integer integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer integer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//现在提供自动装箱和拆箱</span>        <span class="token comment" spellcheck="true">//自动装箱（基本数据类型-->包装类）</span>        Integer integer3<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动拆箱（包装类-->基本数据类型）</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> integer3<span class="token punctuation">;</span>        String numstr <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将字符串转换成整数</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numstr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将字符串转换成整型的包装类</span>        Integer i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>numstr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将一个整数进行二进制输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将一个帧数进行16进制输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>栗子2：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>in<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDeciDemo01</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">9.9</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token operator">-</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果为：0.0999999999964</span>    <span class="token comment" spellcheck="true">//问：如何解决结果才0.1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>解决方案：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>in<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDeciDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"9.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//减</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乘</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-Math"><a href="#2-Math" class="headerlink" title="2. Math"></a>2. Math</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>math<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//绝对值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最小值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最大值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向上取整</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向下取整</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">5.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//floor(a+0.5)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//生成随机数:[0,1)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>所有方法可查阅API文档</strong></p><h3 id="3-Random"><a href="#3-Random" class="headerlink" title="3. Random"></a>3. Random</h3><p>生成随机数：<code>java.util.Random</code></p><pre class=" language-java"><code class="language-java">Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个Random对象</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//随机生成20个整数</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回下一个整型的伪随机数</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个随机数是："</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：用同一个种子值来初始化两个Random对象，然后用每个对象调用相同的方法，得到的随机数也实现相同的</p><h3 id="4-String"><a href="#4-String" class="headerlink" title="4. String"></a>4. String</h3><h4 id="4-1-String类的基本说明"><a href="#4-1-String类的基本说明" class="headerlink" title="4.1 String类的基本说明"></a>4.1 String类的基本说明</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span><span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span>Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span>CharSequence</code></pre><ul><li>String类代表字符串，Java程序中的所有字符串字面值(如”abc”)都作为此类的实例实现</li><li>字符串是常量，它们的值在创建之后不能更改;</li><li>字符串缓冲区支持可变的字符串;</li><li>因为String对象是不可变的，所以可以共享</li></ul><h4 id="4-2-String的常用构造方法"><a href="#4-2-String的常用构造方法" class="headerlink" title="4.2 String的常用构造方法"></a>4.2 String的常用构造方法</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String(String original)</td><td align="center">使用字符串构造一个字符串对象</td></tr><tr><td align="center">public String(char[] value)</td><td align="center">使用字符数组构造一个字符串对象</td></tr><tr><td align="center">public String(char[] value,int offset,int count)</td><td align="center">使用字符数组构造一个字符串对象</td></tr><tr><td align="center">public String(byte[] bytes)</td><td align="center">使用字节数组构造一个字符串对象</td></tr><tr><td align="center">public String(byte[] bytes,int offset,int length)</td><td align="center">使用字节数组构造一个字符串对象</td></tr></tbody></table><h4 id="4-3-String对象的创建方式"><a href="#4-3-String对象的创建方式" class="headerlink" title="4.3 String对象的创建方式"></a>4.3 String对象的创建方式</h4><p>主要分为两种：</p><ol><li>直接赋值：<code>String str = value;</code></li></ol><p><strong>采用常量池机制保存数据</strong>，首先扫描常量池，如果发现池中没有该字符串，那么此时从常量池创建一个，如果发现池中本来就有该字符串，则直接引用即可</p><ol start="2"><li>采用new的形式：<code>String str = new String(value);</code></li></ol><p><strong>采用堆栈机制完成</strong><br>栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>string<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        String newMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        String newMsg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token operator">==</span>newMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token operator">==</span>msg3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newMsg<span class="token operator">==</span>newMsg2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018151847.png" alt=""></p><h4 id="4-4-字符串的常见方法"><a href="#4-4-字符串的常见方法" class="headerlink" title="4.4 字符串的常见方法"></a>4.4 字符串的常见方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public char charAt(int index)</td><td align="center">返回指定索引处的字符</td></tr><tr><td align="center">public int compareTo(String anotherString)</td><td align="center">安装字典顺序进行比较</td></tr><tr><td align="center">public int compareToIgnoreCase(String str)</td><td align="center">忽略大小写比较</td></tr><tr><td align="center">public String concat(String str)</td><td align="center">将指定字符串连接到此字符串的结尾</td></tr><tr><td align="center">public boolean contains(String s)</td><td align="center">是否包含某个字符串</td></tr><tr><td align="center">public boolean endsWith(String suffix)</td><td align="center">判断字符串是否以指定字符串结束</td></tr><tr><td align="center">public boolean startsWith(String prefix)</td><td align="center">判断字符串是否以指定字符串开始</td></tr><tr><td align="center">public boolean equals(Object anObject)</td><td align="center">判断字符串的内容是否相等</td></tr><tr><td align="center">public boolean equalsIgnoreCase(String anotherString)</td><td align="center">忽略字符串大小写比较内容是否相等</td></tr><tr><td align="center">所有方法可在API文档查询使用</td><td align="center">API文档资源在笔记1中</td></tr></tbody></table><h3 id="5-StringBuffer"><a href="#5-StringBuffer" class="headerlink" title="5. StringBuffer"></a>5. StringBuffer</h3><p>StringBuffer类的声明</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span><span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span>CharSequence</code></pre><p>为什么要使用StringBuffer类<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018153417.png" alt=""><br>使用StringBuffer进行改造<br>创建方式只有一种：使用构造方法完成StringBuffer对象的创建操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>string<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String msg = "hello";</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abcefg"</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token string">"abcefg"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>当字符串内容需要频繁修改的时候，此时使用StringBuffer类会比较好，其他情况下使用String和StringBuffer基本一致</strong></p><h3 id="6-Object"><a href="#6-Object" class="headerlink" title="6. Object"></a>6. Object</h3><p>Object类是所有类的父类</p><h4 id="6-1-equals方法"><a href="#6-1-equals方法" class="headerlink" title="6.1 equals方法"></a>6.1 equals方法</h4><p>默认实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object boj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>==：左右两边是基本数据类型，则比较的是基本数据类型的值<br>==：左右两边是引用数据类型，则比较的是引用数据类型的地址值</p><h4 id="6-2-finalize"><a href="#6-2-finalize" class="headerlink" title="6.2 finalize"></a>6.2 finalize</h4><p>表示Java在调用垃圾收集机制，处理垃圾之前的一个动作，在此方法中实现<br>栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>object<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    String name <span class="token punctuation">;</span>     <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出生了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//super.finalize();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"去世了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">=</span>null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//finalize()</span>        <span class="token comment" spellcheck="true">//Runtime.getRuntime().gc();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-日期操作"><a href="#7-日期操作" class="headerlink" title="7. 日期操作"></a>7. 日期操作</h3><p>日期类：<code>java.util.Date</code><br>构造方法：<code>Date date = new Date()</code><br>格式化类：<code>java.text.SimpleDateFormat</code><br>构造方法：<code>public SimpleDateFormat(String pattern)</code><br><strong>具体使用方法可查阅API文档</strong><br>格式：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018154631.png" alt=""><br>栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建SimpleDateFormat对象</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将date类型转换成字符串</span>        String str <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在将字符串转换成日期</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将字符串转换成日期类型</span>            Date d<span class="token operator">=</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Calendar</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Calendar</span><span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span>Cloneable<span class="token punctuation">,</span>Comparable<span class="token operator">&lt;</span>Calendar<span class="token operator">></span></code></pre><p>栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalendarDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当前时间</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这个类提供一些get方法。</span>        <span class="token comment" spellcheck="true">//获取年份</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取月份</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-System"><a href="#8-System" class="headerlink" title="8. System"></a>8. System</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static void exit(int status)</td><td align="center">退出应用程序</td></tr><tr><td align="center">public static void gc()</td><td align="center">调用垃圾收集机制</td></tr><tr><td align="center">public static Properties getProperties()</td><td align="center">取得系统的资源信息</td></tr><tr><td align="center">其他方法可查阅API文档</td><td align="center">API文档资源在笔记1中</td></tr><tr><td align="center">栗子：</td><td align="center"></td></tr><tr><td align="center">```java</td><td align="center"></td></tr><tr><td align="center">package com.leeyin98.system;</td><td align="center"></td></tr><tr><td align="center">import java.util.Enumeration;</td><td align="center"></td></tr><tr><td align="center">import java.util.Properties;</td><td align="center"></td></tr></tbody></table><p>public class Test2 {<br>    public static void main(String[] args) {<br>        //Properties对象<br>        Properties props = System.getProperties();<br>        //获取props对象中所有key值<br>        Enumeration enums = props.keys();<br>        //循环读取所有的key<br>        while(enums.hasMoreElements()) {<br>            //取出当前的key值<br>            String key =(String)enums.nextElement();<br>            //getProperty(key)—&gt;根据key取得对应的值<br>            System.out.println(key+”–&gt;”+props.getProperty(key));<br>        }<br>    }<br>}<br>```</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【混剪练习.00】怎样的战斗在等待着我</title>
      <link href="/posts/e773.html"/>
      <url>/posts/e773.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>BGM：Billie Eilish - you should see me in a crown (IIZI Remix)<br>《Pr上分攻略》中的练手视频素材<br>“艾欧尼亚，昂扬不灭！”<br>“断剑重铸之日，骑士归来之时！”</p><h3 id="开始观看"><a href="#开始观看" class="headerlink" title="开始观看"></a>开始观看</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=98416433&amp;cid=167999668&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视频剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记6. 异常处理与类的生命周期</title>
      <link href="/posts/f38e.html"/>
      <url>/posts/f38e.html</url>
      
        <content type="html"><![CDATA[<h1 id="第6讲-异常处理与类的生命周期"><a href="#第6讲-异常处理与类的生命周期" class="headerlink" title="第6讲 异常处理与类的生命周期"></a>第6讲 异常处理与类的生命周期</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第6讲主要讲述：异常体系结构；异常处理；自定义异常；类的生命周期</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1. 异常处理"></a>1. 异常处理</h3><h4 id="1-1-异常详解"><a href="#1-1-异常详解" class="headerlink" title="1.1 异常详解"></a>1.1 异常详解</h4><h5 id="异常定义"><a href="#异常定义" class="headerlink" title="异常定义"></a>异常定义</h5><ul><li>异常是指在程序的运行过程中所发生的不正常的事件，它会中断正在运行的程序</li><li>异常处理是在程序运行的过程中通过处理异常来让程序完成后续的操作<br>异常主要涉及以下关键字的学习：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018131332.png" alt=""></li></ul><h5 id="语法定义"><a href="#语法定义" class="headerlink" title="语法定义"></a>语法定义</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    可能产生异常的代码→可能产生一个异常对象<span class="token punctuation">}</span><span class="token keyword">catch</span>（SubException e）<span class="token punctuation">{</span>    异常处理代码<span class="token punctuation">}</span><span class="token keyword">catch</span>（SubException e）<span class="token punctuation">{</span>    异常处理代码<span class="token punctuation">}</span><span class="token keyword">catch</span>（SubException e）<span class="token punctuation">{</span>    异常处理代码<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span>（Exception e）<span class="token punctuation">{</span>    异常处理代码<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    无论是否有异常都会执行的代码<span class="token punctuation">}</span></code></pre><h5 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h5><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018133312.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018133329.png" alt=""></p><blockquote><ol><li>运行时系统在调用栈中查找</li><li>捕获(catch)异常的代码</li><li>多catch的情况，父类异常必须写在子类异常的后面，否则会编译报错</li><li>finally里的代码块无论是否发生异常都会执行，除非遇到了<code>System.exit()</code>语句</li><li>其中，catch语句可以是0或多个，可以没有fanally语句</li></ol></blockquote><p><strong>栗子1：try中没有发生异常的情况</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d"</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num1<span class="token operator">/</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢使用本程序！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>栗子2：try中发生了异常，并且此异常有对应的catch处理语句</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d"</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num1<span class="token operator">/</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢使用本程序！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>栗子3：try中发生了异常，但没有对应的cath进行处理</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d"</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num1<span class="token operator">/</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String msg <span class="token operator">=</span> null<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢使用本程序！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>栗子4：多catch的处理情况</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d"</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num1<span class="token operator">/</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"abc.org.Pet"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>NullPointerException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArrayIndexOutOfBoundsException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组越界了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统产生了异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢使用本程序！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-异常体系结构"><a href="#1-2-异常体系结构" class="headerlink" title="1.2 异常体系结构"></a>1.2 异常体系结构</h4><h5 id="体系结构图"><a href="#体系结构图" class="headerlink" title="体系结构图"></a>体系结构图</h5><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228194514.png" alt=""><br>Error：JVM的错误<br>Exception：异常，其构造方法为：</p><ul><li><code>public Exception();</code></li><li><code>public Exception(String message);</code></li><li><code>Exception(String message,Throwable cause);</code></li></ul><h5 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h5><p>Exception分为两种：</p><ul><li>RuntimeException及其子类，可以不明确使用try…catch处理</li><li>否则，称为受检的异常(checked Exception)<br>受检的异常，要求明确进行语法处理：</li><li>要么捕获(catch)</li><li>要么抛出(throws)：在方法的签名后面用throws xxxx来声明</li></ul><h5 id="常见的RuntimeException"><a href="#常见的RuntimeException" class="headerlink" title="常见的RuntimeException"></a>常见的RuntimeException</h5><table><thead><tr><th align="center">异常名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">java.lang.NullPointerException</td><td align="center">空指针异常</td></tr><tr><td align="center">java.lang.ClassCastExcpetion</td><td align="center">类转换异常</td></tr><tr><td align="center">java.lang.ArithmeticException</td><td align="center">算术异常</td></tr><tr><td align="center">java.lang.IndexOutOfBoundsException</td><td align="center">索引越界异常</td></tr><tr><td align="center">java.lang.ArrayStoreExcpetion</td><td align="center">数组存储异常</td></tr><tr><td align="center">java.lang.IllegalArgumentException</td><td align="center">非法参数异常</td></tr><tr><td align="center">java.lang.NoSuchElementException</td><td align="center">无此元素异常</td></tr><tr><td align="center">java.lang.InputMismatchException</td><td align="center">输入不匹配异常</td></tr></tbody></table><h4 id="1-3-throws、throw关键字说明"><a href="#1-3-throws、throw关键字说明" class="headerlink" title="1.3 throws、throw关键字说明"></a>1.3 throws、throw关键字说明</h4><p><strong>throws：用在方法声明处、表示告知调用者此次方法可能产生异常</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//告知调用者此方法可能会产生异常</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">,</span> ArithmeticException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"aa.bb.CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ClassNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>throw：程序需自行抛出一个异常对象，一般会和throws结合起来使用</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>age<span class="token operator">></span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//程序自行抛出一个异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"年龄不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在调用的时候。对异常进行处理</span>            p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-自定义异常"><a href="#1-4-自定义异常" class="headerlink" title="1.4 自定义异常"></a>1.4 自定义异常</h4><h5 id="创建用户自定义异常"><a href="#创建用户自定义异常" class="headerlink" title="创建用户自定义异常"></a>创建用户自定义异常</h5><p>继承自Exception类或某个子Exception类(如RuntimeException)<br>定义属性和方法，或重载父类的方法<br>栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token function">AgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"年龄不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> AgeException<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>age<span class="token operator">></span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AgeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="重抛异常及异常链接"><a href="#重抛异常及异常链接" class="headerlink" title="重抛异常及异常链接"></a>重抛异常及异常链接</h5><p>对于异常，不仅要进行捕获处理，有时也要将此异常进一步传递给调用者，以便让调用者也能感受到这种异常，这时可以在catch语句块或finally语句块中采取以下三种方式：</p><ul><li>将当前捕获的异常再次抛出<ul><li><code>throw e;</code></li></ul></li><li>重新生成一个异常并抛出，如<ul><li><code>throw new Exception("some message");</code></li></ul></li><li>重新生成并抛出一个新异常，该异常中包含了当前异常的信息，如<ul><li><code>throw new Exception("some message",e);</code>可用<code>e.getCause()</code>得到内部异常</li></ul></li></ul><h4 id="1-5-异常小结"><a href="#1-5-异常小结" class="headerlink" title="1.5 异常小结"></a>1.5 异常小结</h4><blockquote><ol><li>Java程序的执行过程中若出现异常，会在自动生成一个异常类对象，该异常对象将会被提交给Java运行时系统，这个过程称为抛出(throw)异常</li><li>当Javav运行时系统接收到异常对象时，会寻找能处理这一异常的代码并把当前异常对象交给其处理，这一过程称为捕获(catch)异常</li><li>如果Java运行时系统找不到捕获异常的方法，则运行时系统将终止，相应的Java程序也将退出</li><li>不要在循环结构包裹try…catch块</li></ol></blockquote><h4 id="1-6-Log4j日志框架"><a href="#1-6-Log4j日志框架" class="headerlink" title="1.6 Log4j日志框架"></a>1.6 Log4j日志框架</h4><h5 id="Log4j概述"><a href="#Log4j概述" class="headerlink" title="Log4j概述"></a>Log4j概述</h5><p>log4j是一个非常优秀的开源日志记录工具</p><ul><li>控制日志的输出级别</li><li>控制日志信息输送的目的地是控制台、文件等</li><li>控制每一条日志的输出格式</li></ul><h5 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h5><ol><li>添加jar包到工程<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018155913.png" alt=""></li><li>add buildPath<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018155950.png" alt=""></li><li>从emaple文件中拷贝一个*.properties文件到src目录<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018160008.png" alt=""></li><li>将<em>.properties文件改名为*</em>log4j.properties**</li><li>使用Logger输出日志信息<br>栗子：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//定义一个日志输出器</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.leeyin98.test.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">{</span>         s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Age Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//System.out.println(e.getMessage());</span>         <span class="token comment" spellcheck="true">//e.printStackTrace();</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         logger<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h5 id="关于log4j的详细说明"><a href="#关于log4j的详细说明" class="headerlink" title="关于log4j的详细说明"></a>关于log4j的详细说明</h5><p>参数说明:</p><ol><li>debug，指的是日志记录器的(Logger)的输出级别,主要级别</li></ol><ul><li>fatal:指出每个严重的错误事件将会导致应用程序的退出</li><li>error:虽然发生错误事件,但任然不影响系统的运行</li><li>warn:表明会出现潜在的错误的情形</li><li>info:在粗粒度级别上指明消息,强调应用程序的运行过程</li><li>debug:指出细粒度信息事件,对应用调试非常有帮助<br>各个级别的优先级为：<strong>fatal&gt;error&gt;warn&gt;info&gt;debug</strong></li></ul><ol start="2"><li>stout、lofile<br>日志输出目的地Appender，log4j允许记录日志到多个输出目的地,一个输出目的地被称为一个Appender,lo4j中常用的Appender有以下几种：</li></ol><ul><li>ConsoleAppender:输出日志到控制台,通过Target属性配置输出到System.out或者System.err,默认为System.out</li><li>FileAppender:输出日志到一个文件,通过File属性配置文件的路径及名称</li></ul><ol start="3"><li>日志布局类型Layout<br>Appender必须使用一个与之相关联的布局类型Layout,用来指定输出的样式,log4j中最常用的Layout有3种：</li></ol><ul><li>HTMLLayout:格式化日志输出为HTML</li><li>SimpleLayout:以一种非常简单的方式格式化输出,它打印级别Level,然后跟着一个破折号”-“最后是日志消息</li><li>PatterLayout:根据制定的转换模式格式化日志输出,从而支持丰富多样的输出格式,需要配置layout.ConversionPattern属性,如果没有配置该属性,则使用默认的转化模式</li></ul><ol start="4"><li>转换模式ConversionPattern<br>对于PatterLayout,需要配置layout.ConversionPattern属性,常用的配置参数及含义如下</li></ol><ul><li>%d:用来输出日志的日期和时间，%d{yyyy-MM-dd HH:mm:ss}</li><li>%m:输出代码中制定的信息</li><li>%n:输出换行</li><li>%l:用来输出日志事件的发生位置,包括类名、发生的线程、以及代码中的行数</li><li>%p:用来输出优先级</li><li>%F:输出文件名</li><li>%M:用来输出方法名<br>栗子：<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>course<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>InputMismatchException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span></code></pre></li></ul><p>public class Couse {<br>    public static void choiceCourse() throws NoException{<br>        System.out.println(“请输入课程编号（1-3之间任意数）”);<br>        Scanner input = new Scanner(System.in);<br>        int num = input.nextInt();<br>        switch(num) {<br>            case 1:<br>                System.out.println(“c++”);<br>                break;<br>            case 2:<br>                System.out.println(“c语言”);<br>                break;<br>            case 3:<br>                System.out.println(“scala”);<br>                break;<br>            default :<br>                throw new NoException();<br>        }<br>    }<br>    Logger logger = Logger.getLogger(“com.leeyin98.course.Couse”);<br>    public static void main(String[] args) {<br>        try {<br>            choiceCourse();<br>        } catch(InputMismatchException e) {<br>            System.out.println(“输入的必须是数字”);<br>            e.printStackTrace();<br>        }catch (NoException e) {<br>            e.printStackTrace();<br>        }finally{<br>            System.out.println(“欢迎提出建议”);<br>        }<br>        System.out.println(“程序执行结束”);<br>    }<br>}</p><p>```</p><h3 id="2-类与对象的声明周期"><a href="#2-类与对象的声明周期" class="headerlink" title="2. 类与对象的声明周期"></a>2. 类与对象的声明周期</h3><h4 id="2-1-Java中的内存"><a href="#2-1-Java中的内存" class="headerlink" title="2.1 Java中的内存"></a>2.1 Java中的内存</h4><p><strong>方法区</strong>：Java的虚拟机中有一块专门用来存放已经加载的类的信息、常量、静态变量以及方法代码的内存区域，称为方法区<br><strong>常量池</strong>：常量池是方法区的一部分，主要用来存放常量和类中的符号引用等信息<br><strong>堆区</strong>：用于存放类的对象实例(new 出来的都在堆区)<br><strong>栈区</strong>：又叫Java虚拟机栈，是由一个个的栈帧组成的后进先出的栈式结构，栈帧中存放方法运行时产生的局部变量、方法出口等信息。当调用一个方法时，虚拟机栈中就会创建一个栈帧存放这些数据，<strong>当方法调用完成时，栈帧消失</strong>，如果方法中调用了其他方法，则继续在栈顶创建新的栈帧</p><h4 id="2-2-类的声明周期"><a href="#2-2-类的声明周期" class="headerlink" title="2.2 类的声明周期"></a>2.2 类的声明周期</h4><h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><p>在加载阶段，Java虚拟机会做什么工作呢？其实很简单，就是找到需要加载的类并把类的信息加载到JVM的方法区中，然后在堆区中实例化一个java.lang.Class对象，作为方法区中这个类的信息的入口。<br>类的加载方式比较灵活，我们最常用的加载方式有两种，<strong>一种是根据类的全路径名找到相应的class文件，然后从class文件中读取文件内容；</strong>另一种是从jar文件中读取。<br>加载阶段是类的生命周期中的第一个阶段，加载阶段之后，是连接阶段。有一点需要注意，就是有时连接阶段并不会等加载阶段完全完成之后才开始，而是交叉进行，可能一个类只加载了一部分之后，连接阶段就已经开始了。但是这两个阶段总的开始时间和完成时间总是固定的：加载阶段总是在连接阶段之前开始，连接阶段总是在加载阶段完成之后完成。</p><h5 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h5><p>连接阶段比较复杂，一般会跟加载阶段和初始化阶段交叉进行，这个阶段的主要任务就是做一些加载后的验证工作以及一些初始化前的准备工作，可以细分为三个步骤：验证、准备和解析。<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201018140903.png" alt=""><br><strong>验证</strong>：当一个类被加载之后，必须要验证一下这个类是否合法，比如这个类是不是符合字节码的格式、变量与方法是不是有重复、数据类型是不是有效、继承与实现是否合乎标准等等。总之，这个阶段的目的就是保证加载的类是能够被JVM所运行。<br><strong>准备</strong>：准备阶段的工作就是为类的静态变量分配内存并设为JVM默认的初值，对于非静态的变量，则不会为它们分配内存。有一点需要注意，这时候，静态变量的初值为JVM默认的初值，而不是我们在程序中设定的初值。<br>JVM默认的初值是这样的：</p><ul><li>基本类型（int、long、short、char、byte、boolean、float、double）的默认值为0。</li><li>引用类型的默认值为null。</li><li>常量的默认值为我们程序中设定的值，比如我们在程序中定义final static int a = 100，则准备阶段中a的初值就是100。</li></ul><p><strong>解析</strong>：这一阶段的任务就是把常量池中的符号引用转换为直接引用<br>比如我们要在内存中找一个类里面的一个叫做show的方法，显然是找不到。但是在解析阶段，JVM就会把show这个名字转换为指向方法区的的一块内存地址，比如c17164，通过c17164就可以找到show这个方法具体分配在内存的哪一个区域了。这里show就是符号引用，而c17164就是直接引用。在解析阶段，JVM会将所有的类或接口名、字段名、方法名转换为具体的内存地址。</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>在初始化阶段，Java虚拟机执行类的初始化语句，为类的静态变量赋予初始值。在程序中，静态变量的初始化有两种途径：<br>1、在静态变量的声明处进行初始化<br>2、在静态代码块中进行初始化。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>对象的生命周期：</p><ul><li>对象的创建</li><li>对象的使用</li><li>对象的清除<br>Java运行时系统有一个垃圾回收进程负责清除不再使用的对象</li></ul><p><strong>垃圾回收器</strong>：垃圾回收器定期扫描内存，对于被应用的对象加上标记，按可能的路径扫描结束后清除未加标记的对象<br>被回收的对象有：</p><ul><li>不再被任何引用变量引用的对象</li><li>引用变量自动放弃</li><li>人为地将引用变量置为null</li></ul><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><p>在类使用完之后，如果有下面的情况，类就会被卸载：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法<br>如果以上三个条件全部满足，JVM就会在方法区垃圾回收的时候对类进行卸载，类的卸载过程其实就是在方法区中清空类信息，Java类的整个生命周期就结束了</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记5. 接口</title>
      <link href="/posts/b5d8.html"/>
      <url>/posts/b5d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="第5讲-接口"><a href="#第5讲-接口" class="headerlink" title="第5讲 接口"></a>第5讲 接口</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第5讲主要讲述：接口概述；接口实现；理解接口；相关接口介绍；适配器介绍；接口总结</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-什么是接口"><a href="#1-什么是接口" class="headerlink" title="1. 什么是接口"></a>1. 什么是接口</h3><h4 id="1-1-接口的定义语法"><a href="#1-1-接口的定义语法" class="headerlink" title="1.1 接口的定义语法"></a>1.1 接口的定义语法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">interfaceName</span><span class="token punctuation">{</span>    静态常量<span class="token punctuation">(</span>常量默认采用<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>修饰<span class="token punctuation">)</span>    抽象方法<span class="token punctuation">(</span>方法默认采用<span class="token keyword">public</span> <span class="token keyword">abstract</span>修饰<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//JDK1.8中增加了`静态方法`和`默认方法`</span><span class="token punctuation">}</span></code></pre><p><strong>接口的特性</strong>：</p><blockquote><ol><li>接口本身不能直接实例化</li><li>接口与接口之间支持多继承</li><li>一个类可以在继承父类的基础上同时实现多个接口（必须实现接口中定义的所有抽象方法）</li><li>接口中没有构造方法<br>栗子：</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口之间实现多继承</span><span class="token keyword">interface</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">,</span>c<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承父类同时实现多个接口</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span>C<span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-如何实现接口"><a href="#2-如何实现接口" class="headerlink" title="2. 如何实现接口"></a>2. 如何实现接口</h3><h4 id="2-1-栗子1：USB"><a href="#2-1-栗子1：USB" class="headerlink" title="2.1 栗子1：USB"></a>2.1 栗子1：USB</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201017151708.png" alt=""><br>类图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201017151906.png" alt=""><br>1、定义接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>usb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Usb</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、定义实现类：usbDisk</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>usb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 编写实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDisk</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘正在存储数据。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、定义实现类：usbMouse</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>usb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编写实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbMouse</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标开始点起来。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>usb<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//接口是多态的最佳体现</span>        Usb usb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usb<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsbMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usb<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-栗子2：Handset"><a href="#2-2-栗子2：Handset" class="headerlink" title="2.2 栗子2：Handset"></a>2.2 栗子2：Handset</h4><p>类图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201017152411.png" alt=""><br>1、定义HandSet类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>phone<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandSet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String brand<span class="token punctuation">;</span>    <span class="token keyword">protected</span> String type <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInfo</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在使用"</span><span class="token operator">+</span>brand<span class="token operator">+</span><span class="token string">"的"</span><span class="token operator">+</span>type<span class="token operator">+</span><span class="token string">"手机发送信息："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在使用"</span><span class="token operator">+</span>brand<span class="token operator">+</span><span class="token string">"的"</span><span class="token operator">+</span>type<span class="token operator">+</span><span class="token string">"手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、定义三个接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">NetWork</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">PlayWiring</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String musicName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">TheakePictures</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、编写普通手机类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>phone<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommanHandSet</span> <span class="token keyword">extends</span> <span class="token class-name">HandSet</span> <span class="token keyword">implements</span> <span class="token class-name">PlayWiring</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CommanHandSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义有参构造方法初始化普通手机这个对象</span>    <span class="token keyword">public</span> <span class="token function">CommanHandSet</span><span class="token punctuation">(</span>String brand<span class="token punctuation">,</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String musicName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在使用普通手机播放歌曲："</span><span class="token operator">+</span>musicName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是一台普通手机，手机的品牌："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token operator">+</span><span class="token string">",型号为："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、编写智能手机类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>phone<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AptitudeHandSet</span> <span class="token keyword">extends</span> <span class="token class-name">HandSet</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span><span class="token punctuation">,</span>PlayWiring<span class="token punctuation">,</span>TheakePictures <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AptitudeHandSet</span><span class="token punctuation">(</span>String brand<span class="token punctuation">,</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>type<span class="token operator">=</span> type <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在拍照"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String musicName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">internet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在使用网易云音乐播放:"</span><span class="token operator">+</span>musicName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在使用4g上网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是一台智能手机，手机的品牌："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token operator">+</span><span class="token string">",型号为："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、编写测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>phone<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CommanHandSet chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommanHandSet</span><span class="token punctuation">(</span><span class="token string">"红米"</span><span class="token punctuation">,</span> <span class="token string">"Note3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chs<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chs<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"芒种"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chs<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chs<span class="token punctuation">.</span><span class="token function">sendInfo</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AptitudeHandSet ahs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AptitudeHandSet</span><span class="token punctuation">(</span><span class="token string">"华为"</span><span class="token punctuation">,</span> <span class="token string">"p40"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ahs<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ahs<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ahs<span class="token punctuation">.</span><span class="token function">sendInfo</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ahs<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"芒种"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ahs<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-如何理解接口"><a href="#3-如何理解接口" class="headerlink" title="3. 如何理解接口"></a>3. 如何理解接口</h3><h4 id="3-1-对接口的理解"><a href="#3-1-对接口的理解" class="headerlink" title="3.1 对接口的理解"></a>3.1 对接口的理解</h4><ul><li>接口可以看成是一种能力</li><li>接口可以看成是一种约定或标准</li></ul><h4 id="3-2-接口的好处"><a href="#3-2-接口的好处" class="headerlink" title="3.2 接口的好处"></a>3.2 接口的好处</h4><blockquote><p><strong>可以被多继承</strong><br><strong>设计和实现完全分离</strong><br><strong>更自然的使用多态</strong><br><strong>更容易搭建程序框架(通过接口可以更好的解耦合)</strong><br><strong>更容易更换实现</strong><br><strong>多态的最佳实现是采用接口</strong></p></blockquote><p>栗子：实现面向接口编程完成打印机的功能<br>类图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201017153302.png" alt=""><br>源代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>print<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Inc</span><span class="token punctuation">{</span>    String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BlackInc</span> <span class="token keyword">implements</span> <span class="token class-name">Inc</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token string">"黑白墨盒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ColorInc</span> <span class="token keyword">implements</span> <span class="token class-name">Inc</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token string">"彩色墨盒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Paper</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A4</span> <span class="token keyword">implements</span> <span class="token class-name">Paper</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"A4纸"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B5</span> <span class="token keyword">implements</span> <span class="token class-name">Paper</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"B5纸"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Inc inc<span class="token punctuation">;</span>    <span class="token keyword">private</span> Paper paper <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Printer</span><span class="token punctuation">(</span>Inc inc<span class="token punctuation">,</span> Paper paper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inc <span class="token operator">=</span> inc<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>paper <span class="token operator">=</span> paper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Inc <span class="token function">getInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> inc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInc</span><span class="token punctuation">(</span>Inc inc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inc <span class="token operator">=</span> inc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Paper <span class="token function">getPaper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> paper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPaper</span><span class="token punctuation">(</span>Paper paper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>paper <span class="token operator">=</span> paper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在使用"</span><span class="token operator">+</span>inc<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span>paper<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"上打印"</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Inc i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Paper pa<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Printer p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更换实现</span>        i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlackInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setInc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setPaper</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello____world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-相关接口介绍"><a href="#4-相关接口介绍" class="headerlink" title="4. 相关接口介绍"></a>4. 相关接口介绍</h3><h4 id="4-1-Comparator"><a href="#4-1-Comparator" class="headerlink" title="4.1 Comparator"></a>4.1 Comparator<t></t></h4><p>定义语法：<code>int compare(T o1,T o2);</code><br>栗子：实现emp雇员类的排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>comp<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个雇员类</span><span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String ename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//薪水</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> sal <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Emp</span><span class="token punctuation">(</span>String ename<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span>String ename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSal</span><span class="token punctuation">(</span><span class="token keyword">double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Emp [ename="</span> <span class="token operator">+</span> ename <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", sal="</span> <span class="token operator">+</span> sal <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个Emp类的比较器</span><span class="token keyword">class</span> <span class="token class-name">EmpComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Emp o1<span class="token punctuation">,</span> Emp o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//年龄相同</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对基本数据类型的排序操作</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定义一个Emp类型的对象数组</span>        Emp<span class="token punctuation">[</span><span class="token punctuation">]</span> emps <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"小乔"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"大乔"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"王昭君"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"马超"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"橘右京"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"貂蝉"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不知道如何排序-->ClassCastException(类型转换错误)。</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">EmpComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new EmpComparator()比较的规则</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>emps<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-Comparable"><a href="#4-2-Comparable" class="headerlink" title="4.2 Comparable"></a>4.2 Comparable<t></t></h4><p>定义语法：<code>public int compareTo(T o)</code><br>注意：<strong>comparable一般实现在需要排序的类上</strong><br>栗子：emp雇员类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>comp<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个雇员类</span><span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Emp<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String ename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//薪水</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> sal <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Emp</span><span class="token punctuation">(</span>String ename<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span>String ename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSal</span><span class="token punctuation">(</span><span class="token keyword">double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Emp [ename="</span> <span class="token operator">+</span> ename <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", sal="</span> <span class="token operator">+</span> sal <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Emp o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">?</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token operator">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o<span class="token punctuation">.</span><span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对基本数据类型的排序操作</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定义一个Emp类型的对象数组</span>        Emp<span class="token punctuation">[</span><span class="token punctuation">]</span> emps <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"小乔"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"大乔"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"王昭君"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"马超"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"橘右京"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"貂蝉"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不知道如何排序-->ClassCastException(类型转换错误)。</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>emps<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-Cloneable"><a href="#4-3-Cloneable" class="headerlink" title="4.3 Cloneable"></a>4.3 Cloneable</h4><p>栗子：<br><code>Student s = new Student(“张三”,12,”南京”,”计算机科学与技术”)</code><br><code>Student s2 = s.clone()</code><br>s2的属性值就和s的属性值一模一样,但是s1与s2依然是两个不同的对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>comp<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">private</span> String address <span class="token punctuation">;</span>     <span class="token keyword">private</span> String spe<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String spe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>spe <span class="token operator">=</span> spe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSpe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> spe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSpe</span><span class="token punctuation">(</span>String spe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>spe <span class="token operator">=</span> spe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写的是Object类的clone方法</span>    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", address="</span>                <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">", spe="</span> <span class="token operator">+</span> spe <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较的是地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-适配器介绍"><a href="#5-适配器介绍" class="headerlink" title="5. 适配器介绍"></a>5. 适配器介绍</h3><p>查看JDK中适配器<br><strong>EventListener</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventListener<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WindowFocusListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowGainedFocus</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowLostFocus</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>WindowStateListener</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WindowStateListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowStateChanged</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>WindowListener</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WindowListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowIconified</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeiconified</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeactivated</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义一个适配器(抽象类)实现以上接口，对于接口中的方法采用默认的空实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WindowAdapter</span>    <span class="token keyword">implements</span> <span class="token class-name">WindowListener</span><span class="token punctuation">,</span> WindowStateListener<span class="token punctuation">,</span> WindowFocusListener<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowIconified</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeiconified</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeactivated</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowStateChanged</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowGainedFocus</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowLostFocus</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以后定义类时如果要想实现以上功能，只要继承此适配器类即可，可有选择性的重写相关的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>window<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowImpl</span> <span class="token keyword">extends</span> <span class="token class-name">WindowAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶段性练手项目（二）</title>
      <link href="/posts/4bfc.html"/>
      <url>/posts/4bfc.html</url>
      
        <content type="html"><![CDATA[<h1 id="反应测试小游戏"><a href="#反应测试小游戏" class="headerlink" title="反应测试小游戏"></a>反应测试小游戏</h1><h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h2><p>1、玩家输入错误，系统退出</p><blockquote><p>系统输出：dl<br>玩家输入：di<br>输入错误，游戏结束！！！</p></blockquote><p>2、玩家输入正确，显示玩家相关信息</p><blockquote><p>系统输出：jk<br>玩家输入：jk<br>当前玩家级别：1，当前得分：1，已用时间：2<br>系统输出：aa<br>玩家输入：aa<br>当前玩家级别：1，当前得分：2，已用时间：5</p></blockquote><p>3、玩家输入超时，系统退出</p><blockquote><p>系统输出：qq<br>玩家输入：qq<br>对不起，输入超时，游戏结束！！！</p></blockquote><p>4、玩家过关，等级提升，难度加大，积分清零，已用时间重新计算</p><blockquote><p>系统输出：fb<br>玩家输入：fb<br>当前玩家级别：1，当前得分：10，已用时间：16<br>系统输出：hxd<br>玩家输入：hxd<br>当前玩家级别：2，当前得分：2，已用时间：1</p></blockquote><p>5、玩家通关</p><blockquote><p>系统输出：zsghxd<br>玩家输入：zsghxd<br>当前玩家级别：6，当前得分：60，已用时间：31<br>恭喜你，通关啦！</p></blockquote><h2 id="2-功能拆分"><a href="#2-功能拆分" class="headerlink" title="2. 功能拆分"></a>2. 功能拆分</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016165018.png" alt=""></p><h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3. 源代码"></a>3. 源代码</h2><h3 id="3-1-Player类"><a href="#3-1-Player类" class="headerlink" title="3.1 Player类"></a>3.1 Player类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//玩家当前级别</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩家当前得分</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> perScore<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩家的开始时间</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩家的已用时间</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> elapsedTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLevelNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo <span class="token operator">=</span> levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPerScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> perScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>perScore <span class="token operator">=</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPerSocre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStartTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> startTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setElapsedTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> elapsedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elapsedTime <span class="token operator">=</span> elapsedTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elapsedTime <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"玩家的当前级别："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>levelNo<span class="token operator">+</span><span class="token string">",当前得分为："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>perScore<span class="token operator">+</span><span class="token string">",已用时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>elapsedTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//玩</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//玩家和电脑玩</span>        Game g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将当前玩家传给电脑</span>        g<span class="token punctuation">.</span><span class="token function">setPlayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//外层循环：一共玩多少级。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//升级操作</span>            levelNo<span class="token operator">=</span>levelNo<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回当前时间距离1970年1-1之间的毫秒数</span>            startTime<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分数的清零操作</span>            perScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getStrTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String out <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">GenStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统输出："</span><span class="token operator">+</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String in <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                g<span class="token punctuation">.</span><span class="token function">compareResult</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-Game类"><a href="#3-2-Game类" class="headerlink" title="3.2 Game类"></a>3.2 Game类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Player player<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlayer</span><span class="token punctuation">(</span>Player player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> player<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Player <span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 系统产生的随机字符串：     *    玩家等级发生变化：字符串的长度会变长     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">GenStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前级别</span>        Level currentLevel <span class="token operator">=</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>currentLevel<span class="token punctuation">.</span><span class="token function">getStrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>currentLevel<span class="token punctuation">.</span><span class="token function">getStrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"a"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"b"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"c"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"d"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"e"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"f"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"g"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                    message <span class="token operator">=</span> message <span class="token operator">+</span><span class="token string">"z"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 比较系统的输出和用户的输入     * @param out:系统的输出     * @param in：玩家的输入     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compareResult</span><span class="token punctuation">(</span>String out<span class="token punctuation">,</span>String in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取得结束时间</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">setElapsedTime</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">;</span>            Level currentLevel <span class="token operator">=</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>diff<span class="token operator">&lt;=</span>currentLevel<span class="token punctuation">.</span><span class="token function">getTimeLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">setPerScore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">getPerSocre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>currentLevel<span class="token punctuation">.</span><span class="token function">getPerScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通关判断。</span>                Level max <span class="token operator">=</span> LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">[</span>LevelParam<span class="token punctuation">.</span>LEVEL_PARAMS<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">getPerSocre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>max<span class="token punctuation">.</span><span class="token function">getPerScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">.</span><span class="token function">getStrTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜你，通关了！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起,输入超时，系统退出！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//退出应用程序</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起,输入错误，系统退出！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//退出应用程序</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-Level类"><a href="#3-3-Level类" class="headerlink" title="3.3 Level类"></a>3.3 Level类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 等级类 * @author Administrator */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Level</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//级别号</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串的长度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> strLength<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前级别输入字符串的次数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> strTimes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前的级别限制时间</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timeLimit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//级别的每次得分</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> perScore<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Level</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelNo<span class="token punctuation">,</span> <span class="token keyword">int</span> strLength<span class="token punctuation">,</span> <span class="token keyword">int</span> strTimes<span class="token punctuation">,</span> <span class="token keyword">long</span> timeLimit<span class="token punctuation">,</span>            <span class="token keyword">int</span> perScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo <span class="token operator">=</span> levelNo<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strLength <span class="token operator">=</span> strLength<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strTimes <span class="token operator">=</span> strTimes<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeLimit <span class="token operator">=</span> timeLimit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>perScore <span class="token operator">=</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//alt+shift+s </span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLevelNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLevelNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelNo <span class="token operator">=</span> levelNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> strLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> strLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strLength <span class="token operator">=</span> strLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStrTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> strTimes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrTimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> strTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strTimes <span class="token operator">=</span> strTimes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimeLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> timeLimit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeLimit</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeLimit <span class="token operator">=</span> timeLimit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPerScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPerScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> perScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>perScore <span class="token operator">=</span> perScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-LevelParam类"><a href="#3-4-LevelParam类" class="headerlink" title="3.4 LevelParam类"></a>3.4 LevelParam类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LevelParam</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Level<span class="token punctuation">[</span><span class="token punctuation">]</span> LEVEL_PARAMS<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LEVEL_PARAMS<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-测试类"><a href="#3-5-测试类" class="headerlink" title="3.5 测试类"></a>3.5 测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>reaction<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartGame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4. 测试结果"></a>4. 测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201017144305.png" alt=""></p><h2 id="5-思考"><a href="#5-思考" class="headerlink" title="5. 思考"></a>5. 思考</h2><p>如何为该项目增加难度？使之可以支持以下操作</p><blockquote><ol><li>支持数字练习操作</li><li>支持字母的练习操作</li><li>支持中文的练习操作</li><li>支持混合型的练习操作（数字、字母、中文、符号）</li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记4. 封装、继承与多态</title>
      <link href="/posts/efa8.html"/>
      <url>/posts/efa8.html</url>
      
        <content type="html"><![CDATA[<h1 id="第4讲-封装、继承与多态"><a href="#第4讲-封装、继承与多态" class="headerlink" title="第4讲 封装、继承与多态"></a>第4讲 封装、继承与多态</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第4讲主要讲述：构造方法；方法重载；部分关键字的使用；方法重写；多态；</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h3><h4 id="1-1-面向对象回顾"><a href="#1-1-面向对象回顾" class="headerlink" title="1.1 面向对象回顾"></a>1.1 面向对象回顾</h4><ul><li>在分析问题时，一般先有对象，在众多对象中抽取出类，分析这些类有哪些属性和方法</li><li>在编程过程中，一般先创建类，然后在通过类来创建对象</li><li>在分析问题时，一般可以通过类图来进行讨论和分析<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016143109.png" alt=""></li></ul><h4 id="1-2-构造方法"><a href="#1-2-构造方法" class="headerlink" title="1.2 构造方法"></a>1.2 构造方法</h4><p>语法：</p><pre class=" language-java"><code class="language-java">访问修饰符   类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    对象初始化    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>构造方法的方法名和类名相同</li><li><strong>当我们没有自定义构造方法时，系统会自动产生一个无参数的，什么都不做的构造方法</strong></li><li><strong>当我们自定义构造方法后，系统的默认构造方法不会自动产生，必须手动加上</strong></li><li>构造方法的作用就是完成对象的初始化操作</li><li>构造方法也可以重载(Overload)</li><li><strong>构造方法在new对象的时候自动调用</strong></li><li>如果在本类中的构造方法需要互相调用时，使用this()进行调用，但是需要留有一个出口，放置递归调用</li><li>通过this()调用构造方法时，必须放在构造方法的第一行<br>例：</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> health<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> love <span class="token punctuation">;</span>    <span class="token keyword">private</span> String strain<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我出生了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">=</span> health<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> love<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>health<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>love <span class="token operator">=</span> love <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> love<span class="token punctuation">,</span>String strain<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>health<span class="token punctuation">,</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strain<span class="token operator">=</span>strain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"狗的名字："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",健康值："</span><span class="token operator">+</span>health<span class="token operator">+</span><span class="token string">",亲密度："</span><span class="token operator">+</span>love<span class="token operator">+</span><span class="token string">",品种："</span><span class="token operator">+</span>strain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-方法重载-Overload"><a href="#1-3-方法重载-Overload" class="headerlink" title="1.3 方法重载(Overload)"></a>1.3 方法重载(Overload)</h4><p><strong>方法重载的要求</strong>：</p><blockquote><ol><li>在同一个类中</li><li>方法名称相同</li><li>参数列表不同（参数的个数or参数的数据类型）</li><li>与返回值和修饰符无关</li></ol></blockquote><p>例：现在需要进行一下运算<br>2个整数相加、3个整数相加、4个整数相加…</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMath</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add3</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">int</span> num4<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyMath m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时已经创建了四个不同方法名的方法进行计算，但如果需求更多，则需要创建更多的方法，而方法名过多显得累赘<br>这时候我们就可以通过方法重载来解决问题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMath</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//由于参数个数不同，方法名一样，也是重载。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">int</span> num4<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//由于参数的类型不同，方法名一样，依然是重载</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">double</span> num4<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">+</span>num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyMath m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-this与static关键字"><a href="#1-4-this与static关键字" class="headerlink" title="1.4 this与static关键字"></a>1.4 this与static关键字</h4><p><strong>this关键字</strong><br>this：表示的就是当前对象<br>this()：调用构造方法，必须在构造方法中，并且在构造方法的第一行<br>this.属性：访问本类的属性<br>this.方法：访问本类的方法</p><p><strong>static关键字</strong><br>static可以修饰变量，变量被修饰后称为静态变量（类变量）<br>static可以修饰方法，方法被修饰后称为静态方法（类方法）<br>静态变量和静态方法：可以通过<code>类名.静态变量名(静态方法名)</code>的形式访问，也可以通过对象名.静态变量(静态方法)访问(不推荐)<br>static可以修饰代码块，代码块被修饰后称为静态代码块，静态代码块只执行一次<br>代码块：静态的只能调用静态的，不能调用非静态的，而非静态的可以调用静态的和非静态的<br>static可以修饰类，但只能修饰内部类，被修饰的内部类称为静态内部类<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150237.png" alt=""></p><h4 id="1-5-封装"><a href="#1-5-封装" class="headerlink" title="1.5 封装"></a>1.5 封装</h4><p>概述：<strong>封装就是隐藏内部细节，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问（方法是对代码的封装，类是对属性和方法的封装）</strong><br>步骤：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150518.png" alt=""></p><p>一个简单Java类的编写规则：JavaBean</p><ul><li>类要公开，使用public声明</li><li>属性私有化</li><li>手动提供无参构造方法</li><li>提供getter、setter方法</li><li>在setter中加入控制语句（可选）</li><li>类实现序列化接口</li></ul><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><h4 id="2-1-继承的好处"><a href="#2-1-继承的好处" class="headerlink" title="2.1 继承的好处"></a>2.1 继承的好处</h4><p><strong>继承符合Java的设计原则：开闭原则（对扩展开放，对修改封闭）</strong><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150919.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016150940.png" alt=""></p><h4 id="2-2-继承的使用"><a href="#2-2-继承的使用" class="headerlink" title="2.2 继承的使用"></a>2.2 继承的使用</h4><p>1、编写父类（抽取子类中公共属性和方法）<br>2、编写子类，并用extends继承父类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 子类类名 <span class="token keyword">extends</span> 父类类名<span class="token punctuation">{</span>    子类的操作    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：</p><blockquote><ol><li>在Java中，继承是单根性的，一个类只能有一个直接父类</li><li>继承具备传递性，一个父类可以拥有多个间接子类</li><li>在Java中，java.lang.Object是所有类的父类</li><li>在创建子类时，会默认调用父类的无参构造方法，然后再调用子类的构造方法</li><li>父类不能被子类继承的成员：private成员、构造方法和子父类不同包却用默认访问权限的成员</li></ol></blockquote><h4 id="2-3-方法重写"><a href="#2-3-方法重写" class="headerlink" title="2.3 方法重写"></a>2.3 方法重写</h4><p><strong>方法写的要求</strong>：</p><blockquote><ol><li>方法名必须相同</li><li>参数列表相同</li><li>返回值类型相同或是其子类</li><li>访问权限不能严于父类</li><li>重写方法不能使用比被从重写方法抛出更多异常</li></ol></blockquote><p><strong>重写(Override)与重载(Overload)的区别</strong>：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016152304.png" alt=""></p><h4 id="2-4-继承关系下的执行顺序"><a href="#2-4-继承关系下的执行顺序" class="headerlink" title="2.4 继承关系下的执行顺序"></a>2.4 继承关系下的执行顺序</h4><p>执行优先级从上至下递减：</p><ul><li>父类静态代码块</li><li>子类静态代码块</li><li>父类属性初始化</li><li>父类代码块</li><li>父类构造方法</li><li>子类属性初始化</li><li>子类代码块</li><li>子类构造方法</li></ul><h4 id="2-5-super、abstract和final关键字"><a href="#2-5-super、abstract和final关键字" class="headerlink" title="2.5 super、abstract和final关键字"></a>2.5 super、abstract和final关键字</h4><p><strong>super关键字</strong></p><blockquote><p>super可以访问父类继承过来的属性和方法：super.属性名、super.方法名()<br>super()可以调用父类的构造方法，但是super()必须放在子类构造方法的第一行<br>super在调用父类构造方法时，与this调用构造方法不能共存(即super()与this()不能共存)<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016152755.png" alt=""></p></blockquote><p><strong>abstract关键字</strong></p><blockquote><p>abstract可以修饰一个类，被修饰的类称为抽象类，抽象类不能被实例化：<code>public abstract class Demo(){}</code><br>抽象的组成 = 普通的类的组成+抽象方法<br>abstract可以修饰一个方法，被修饰的方法称为抽象方法，抽象方法没有方法体：<code>public abstract void method();</code><br>如果一个类中又抽象方法，则这个类必须定义为抽象类<br>如果一个子类继承了抽象类，则这个子类必须重写抽象类中的所有抽象方法，除非子类也是抽象类<br>抽象类一般用于模板设计模式和适配器设计模式<br>抽象类也有构造方法</p></blockquote><p><strong>final关键字</strong><br>final关键字可以修饰类、方法和变量</p><blockquote><p>被final修饰的变量称为常量，不可以被修改<br>被final修饰的方法不能被重写<br>被final修饰的类不能被继承<br>被final修饰的基本数据类型不能改变值<br>被final修饰的引用数据类型地址不能被重新指向<br>在JDK中，常用的被final修饰的类有：</p></blockquote><ol><li>java.lang.String</li><li>java.lang.StringBuffer</li><li>java.lang.Integer</li><li>java.lang.System</li><li>java.lang.Class<t><br>…<br>注：final关键字不可以和abstract关键字一起使用！</t></li></ol><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><h4 id="3-1-为什么使用多态"><a href="#3-1-为什么使用多态" class="headerlink" title="3.1 为什么使用多态"></a>3.1 为什么使用多态</h4><p><strong>多态也是开闭原则的一个体现</strong><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201016155008.png" alt=""><br>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//喂养狗</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Dog d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//喂养企鹅</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Penguin p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-什么是多态"><a href="#3-2-什么是多态" class="headerlink" title="3.2 什么是多态"></a>3.2 什么是多态</h4><p>在生活中，多态实际上就是一种事物的不同形态，比如打印机：打印不同大小的纸张，彩色或黑白<br>在程序中，多态是指同一个引用类型，使用不同的示例而执行不同的操作</p><p>改造之前的代码：<br>1、在父类中创建eat方法，此方法先选择空实现：<code>public void eat(){}</code><br>2、子类中重写eat方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>health<span class="token operator">&lt;=</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养了一根骨头，体力增加了10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>health<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无需喂养"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、在mater类中删除之前的所有feed，保留一个并更改方法的定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//p:宠物</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Pet p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、在测试类中，传递子类对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Master m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"leeyin98"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Penguin  p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span><span class="token string">"qq"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"波斯猫"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"黑色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养前："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养后："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-多态的实现"><a href="#3-3-多态的实现" class="headerlink" title="3.3 多态的实现"></a>3.3 多态的实现</h4><p><strong>实现多态的条件</strong>：</p><blockquote><ol><li>在继承关系下</li><li>完成方法重写</li><li>父类引用指向子类对象（里式替换原则）：将父类作为方法的参数，将父类作为方法的返回值</li></ol></blockquote><p>需求：现在主人需要从宠物商店领养一只宠物<br>1、编写一个工厂类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetStore</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建对象     * @param typeName：宠物的类型     * @return 宠物     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Pet <span class="token function">getPetInstance</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">"拉布拉多犬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"波斯猫"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span><span class="token string">"qq"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、主人类中增加一个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Pet <span class="token function">getPet</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> PetStore<span class="token punctuation">.</span><span class="token function">getPetInstance</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、重写测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luke<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Master m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"leeyin98"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//父类引用指向子类独享</span>        Pet d <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pet  p <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之前："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养之后："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pet c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养前："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喂养后："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-类型转换"><a href="#3-4-类型转换" class="headerlink" title="3.4 类型转换"></a>3.4 类型转换</h4><p>想要调用子类的方法有两种方式：<br>1、<code>父类类型  对象 = new 子类类型();</code> 向上类型转换<br>2、<code>父类类型  对象 = new 子类类型();</code><br>   <code>子类类型  对象 = 子类类型(父类对象)</code> 向下类型转换<br>可以看出，向下转型前提是，父类对象指向子类对象，所以得先向上转型，否则可能产生ClassCastException异常。此时则需要使用<code>对象 instanceof 类</code>，在使用instanceof时，对象所在的类和后面的类型要在同一颗继承树上，否则编译报错。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记3.  类、方法</title>
      <link href="/posts/331f.html"/>
      <url>/posts/331f.html</url>
      
        <content type="html"><![CDATA[<h1 id="第3讲-类、包和接口"><a href="#第3讲-类、包和接口" class="headerlink" title="第3讲 类、包和接口"></a>第3讲 类、包和接口</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第3讲主要讲述：类、字段、方法；类的继承；访问控制修饰符；</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-类、字段、方法"><a href="#1-类、字段、方法" class="headerlink" title="1. 类、字段、方法"></a>1. 类、字段、方法</h3><h4 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h4><ul><li>组成java程序的基本要素</li><li>字段（field）是类的属性，用变量表示</li><li>方法（method）是类的功能和操作，用函数表示</li><li>封装了一类对象的状态和方法，即它将变量和函数封装到一个类中<br>定义类的语法：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//属性</span>  访问修饰符 DataType   attributeName1<span class="token punctuation">;</span>  访问修饰符 DataType   attributeName2<span class="token punctuation">;</span>  访问修饰符 DataType   attributeName3<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//方法</span>  <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li></ul><pre><code>#### 1.2 创建和使用对象创建对象：`类名  对象名 = new 类名();`访问对象的属性或方法，需要用符号“.”  如：```javaPerson p = new Person();System.out.println(p.name)；p.sayHello()；</code></pre><h4 id="1-3-方法"><a href="#1-3-方法" class="headerlink" title="1.3 方法"></a>1.3 方法</h4><p>方法的基本语法：</p><pre class=" language-java"><code class="language-java">访问修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//方法的具体操作。</span>      <span class="token punctuation">[</span><span class="token keyword">return</span> value<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>1、有具体的返回类型时，在方法体中，必须return具体的值，值的类型必须和返回值类型匹配<br>2、return：返回到方法的调用处<br>3、返回值为void时，表示此方法的返回值为空,在具体的方法体中不要返回一个具体的值，但是可以return;(表示返回到方法调用处)<br>方法的调用总结：</p><ul><li>本类中可以直接调用方法</li><li>非本类中必须通过创建对象 ，然后通过对象名.方法名()的形式进行调用</li></ul><p>成员变量：类中定义属性，它的作用域在整个类中<br>局部变量：局部变量的作用范围仅仅在定义它的方法内，或者是在定义它的控制流块中<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015144936.png" alt=""></p><p>方法定义时的参数：形参。<br>方法调用时，传递时的参数称为实参。</p><ul><li>将对象作为方法的参数<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span></code></pre></li></ul><p>class Student {<br>    int javaScore;<br>    int htmlScore;<br>    int dbScore;<br>}<br>class ScoreCalc {<br>    public int getSum(Student s){<br>        return s.dbScore+s.htmlScore+s.javaScore;<br>    }<br>    public int getAvg(Student s) {<br>        return getSum(s)/3;<br>    }</p><p>}</p><p>package com.leeyin98.test;<br>public class ScoreCalcTest {<br>    public static void main(String[] args) {<br>        ScoreCalc sc = new ScoreCalc();<br>        //创建学生对象<br>        Student s = new Student();<br>        s.dbScore=90;<br>        s.htmlScore=80;<br>        s.javaScore=60;<br>        System.out.println(“总分为：”+sc.getSum(s));<br>        System.out.println(“平均分为：”+sc.getAvg(s));</p><pre><code>}</code></pre><p>}</p><pre><code>- 将对象数组作为方法的参数```javapackage com.leeyin98.demo02;class Student {    int javaScore;    int htmlScore;    int dbScore;    //升高    int height;}class HeightCalc {    public int getAvgHeight(Student[] students){        int sum = 0 ;         for(int i = 0 ;i&lt;students.length;i++) {            sum =sum+students[i].height;        }        return sum/students.length;    }}public class HeightCalcTest {    public static void main(String[] args) {        HeightCalc hc = new HeightCalc();        Student[] students = new Student[4];        students[0]=new Student();        students[1]=new Student();        students[2]=new Student();        students[3]=new Student();        students[0].height=180;        students[1].height=190;        students[2].height=220;        students[3].height=165;        System.out.println(hc.getAvgHeight(students));    }}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015145840.png" alt=""></p><h5 id="1-3-1-构造方法"><a href="#1-3-1-构造方法" class="headerlink" title="1.3.1 构造方法"></a>1.3.1 构造方法</h5><p>构造方法和类名同名，且不写返回数据类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//变量</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造方法产生！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1-3-2-方法重载"><a href="#1-3-2-方法重载" class="headerlink" title="1.3.2 方法重载"></a>1.3.2 方法重载</h5><ul><li>多个方法有相同的名字，编译时也能识别出来</li><li>这些同名方法的返回值类型不同，或参数个数或参数类型不同</li><li>通过方法重载可以实现多态<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//变量</span>  <span class="token comment" spellcheck="true">//方法重载</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!My name is"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!My age is"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="1-4-this的使用"><a href="#1-4-this的使用" class="headerlink" title="1.4 this的使用"></a>1.4 this的使用</h4><ul><li>在方法及构造方法中，使用this来访问字段及方法</li><li>解决局部变量与域同名的问题，如：<pre class=" language-java"><code class="language-java">  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this.age表示域变量，age表示参数变量</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li>构造方法中，用this调用另一个构造方法，但调用语句必须放第一句</li></ul><h4 id="1-5-再谈引用数据类型"><a href="#1-5-再谈引用数据类型" class="headerlink" title="1.5 再谈引用数据类型"></a>1.5 再谈引用数据类型</h4><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person  p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的值为："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p的age："</span><span class="token operator">+</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>内存图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015150356.png" alt=""></p><p>修改change方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>内存图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015150512.png" alt=""></p><p>总结：</p><ul><li><strong>对于基本类型而言，传递的就是其值</strong></li><li><strong>对于引用数据类型而言，传递的就是地址的值</strong></li><li><strong>一个栈只能指向一个堆。一个堆可以被多个栈所指向</strong></li></ul><h3 id="2-类的继承-初步"><a href="#2-类的继承-初步" class="headerlink" title="2. 类的继承(初步)"></a>2. 类的继承(初步)</h3><h4 id="2-1-继承"><a href="#2-1-继承" class="headerlink" title="2.1 继承"></a>2.1 继承</h4><ul><li>继承是面向对象的程序设计中最为重要的特征之一</li><li>Java中的继承是通过extends关键词来实现的</li><li>字类、父类或超类（父类包括直接或间接被继承的类）</li><li>Java支持单继承：一个类只能有一个直接父类</li><li>子类继承父类的状态和行为(字段和方法，构造方法不可继承）<br>  -可以修改父类的状态或重载父类的行为(字段和方法）<br>  -可以添加新的状态和行为(字段和方法）</li></ul><h4 id="2-2-super的使用"><a href="#2-2-super的使用" class="headerlink" title="2.2 super的使用"></a>2.2 super的使用</h4><ul><li>使用super访问父类的域和方法，this也可以，但用super更加明确</li><li>有时需要使用super以区别同名的域与方法</li><li>构造方法不可继承，但子类在构造方法中可以用super来调用父类的构造方法<ul><li>使用时，super()必须放在第一句</li></ul></li></ul><h4 id="2-3-父类对象与子类对象的转换"><a href="#2-3-父类对象与子类对象的转换" class="headerlink" title="2.3 父类对象与子类对象的转换"></a>2.3 父类对象与子类对象的转换</h4><ul><li>子类对象可以被视为其父类的一个对象</li><li>父类对象不能被当做其子类的一个对象</li><li>若一个方法的形式参数定义的是父类对象，那么调用该方法时，可以使用子类对象作为实际参数</li><li>若父类对象引用指向的实际是一个子类对象，那么这个父类对象的引用可以用强制类型转换成子类对象的引用</li></ul><h4 id="2-4-package包"><a href="#2-4-package包" class="headerlink" title="2.4 package包"></a>2.4 package包</h4><ul><li><code>package pkg1[.pkg2[.pkg3…..]]</code></li><li>包与子包的定义，实际是为了解决名字空间、名字冲突</li><li>与类的继承无关，一个子类与其父类可位于不同的包中</li><li>同一个包中的各个类，默认情况下可互相访问</li><li>使用java中已提供的类，需要用import语句来导入所需要的类。</li><li>语句格式：<code>import package1[.package2…].(classname|*)</code>;如：<ul><li><code>import java.awt.event.*;</code></li></ul></li></ul><h3 id="3-访问控制修饰符"><a href="#3-访问控制修饰符" class="headerlink" title="3. 访问控制修饰符"></a>3. 访问控制修饰符</h3><h4 id="3-1-可见性，即能在哪些地方被使用"><a href="#3-1-可见性，即能在哪些地方被使用" class="headerlink" title="3.1 可见性，即能在哪些地方被使用"></a>3.1 可见性，即能在哪些地方被使用</h4><table><thead><tr><th></th><th align="center">同一个类中</th><th align="center">同一个包中</th><th align="center">不同包中的子类</th><th align="center">不包中的非子类</th></tr></thead><tbody><tr><td>private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>默认</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td>protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td>public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h4 id="3-2-private修饰"><a href="#3-2-private修饰" class="headerlink" title="3.2 private修饰"></a>3.2 private修饰</h4><p>将字段用private修饰，用setXXXX与getXXXX方法对类的属性进行存取<br>优点：</p><ul><li>属性用prvate更好地封装和隐藏，外部类不能随意存取和修改</li><li>提供方法来存取对象的属性，在方法中可以对给定的参数的合法性进行校验</li><li>方法可以用来给出计算后的值</li><li>方法可以完成其他必要的工作（如清理资源、设定状态等）</li><li>只提供getXXXX方法，而不提供setXXXX方法，可以保证属性是只读的<br>例：<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person2</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="3-3-非访问控制符"><a href="#3-3-非访问控制符" class="headerlink" title="3.3 非访问控制符"></a>3.3 非访问控制符</h4><table><thead><tr><th></th><th align="center">基本含义</th><th align="center">修饰类</th><th align="center">修饰成员</th><th align="center">修饰局部变量</th></tr></thead><tbody><tr><td>static</td><td align="center">静态的、非实例的、类的</td><td align="center">可修饰内部类</td><td align="center">√</td><td align="center"></td></tr><tr><td>final</td><td align="center">最终的、不可改变的</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>abstract</td><td align="center">抽象的、不可实例化的</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr></tbody></table><h4 id="3-4-接口-interface"><a href="#3-4-接口-interface" class="headerlink" title="3.4 接口(interface)"></a>3.4 接口(interface)</h4><ul><li>定义接口interface，如<code>interface Collection{....}</code></li><li>实现接口implements，如<code>class FIFOQueue implements Collection{...}</code></li><li>作用：<ul><li>通过接口可以实现不相关类的相同行为，而不需要考虑这些类之间的层次关系，从而在一定意义上实现了多重继承</li><li>通过接口可以指明多个类需要实现的方法</li><li>通过接口可以了解对象的交互界面，而不需要了解对象所对应的类</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记2. 数据运算、流程控制和数组</title>
      <link href="/posts/d0a4.html"/>
      <url>/posts/d0a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2讲-数据运算、流程控制和数组"><a href="#第2讲-数据运算、流程控制和数组" class="headerlink" title="第2讲 数据运算、流程控制和数组"></a>第2讲 数据运算、流程控制和数组</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第2讲主要讲述：数据类型、变量与常量；运算符与表达式；流程控制语句；数组</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-数据类型、变量与常量"><a href="#1-数据类型、变量与常量" class="headerlink" title="1. 数据类型、变量与常量"></a>1. 数据类型、变量与常量</h3><h4 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h4><ul><li>基本类型：变量在栈</li><li>引用类型：变量引用到堆<ul><li><code>double d = 3;</code></li><li><code>Person p = new Preson();</code><br>赋值时：</li><li><code>double d2=d;</code>    复制的是值</li><li><code>Person p2=p;</code>    复制的是引用<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228143215.png" alt=""></li></ul></li></ul><h4 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228143338.png" alt=""></p><ul><li>常用的基本数据类型<table><thead><tr><th>数据类型</th><th align="center">说明</th><th align="center">位数</th><th align="center">应用</th><th align="center">示例</th></tr></thead><tbody><tr><td>int</td><td align="center">整型</td><td align="center">32</td><td align="center">用于存储整数，如年龄、个数</td><td align="center">int age=21;</td></tr><tr><td>double</td><td align="center">双精度浮点型</td><td align="center">64</td><td align="center">用于存储小数，如商品价格</td><td align="center">double price=15.5;</td></tr><tr><td>float</td><td align="center">单精度浮点型</td><td align="center">32</td><td align="center">用于存储小数，如身高</td><td align="center">float height=175.2f;</td></tr><tr><td>char</td><td align="center">字符型</td><td align="center">16</td><td align="center">用于存储单个字符，如性格’男’</td><td align="center">char sex=’男’;</td></tr><tr><td>boolean</td><td align="center">布尔型</td><td align="center">8</td><td align="center">表示真或假，取值只能为true或false</td><td align="center">boolean flag=true;</td></tr><tr><td>byte</td><td align="center">字节</td><td align="center">8</td><td align="center">用于处理二进制数据</td><td align="center">byte by = 101;</td></tr><tr><td>short</td><td align="center">短整型</td><td align="center">16</td><td align="center">用于存储整数</td><td align="center">short num = 99;</td></tr><tr><td>long</td><td align="center">长整型</td><td align="center">64</td><td align="center">有时处理日期类型时用到</td><td align="center">long num = 369;</td></tr></tbody></table></li></ul><p>注：</p><ul><li>为float变量赋值时在数值后添加字母f</li><li>为char变量赋值时使用单引号引起来</li><li>String是一种常见的引用数据类型，用来表示字符串，赋值时用双引号引起来</li><li>Java中没有“无符号数”</li></ul><h4 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h4><ul><li>自动类型转换：小→大<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> firstAvg <span class="token operator">=</span> <span class="token number">81.22</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> rise <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//自动类型转换</span>      <span class="token keyword">double</span> secondAvg <span class="token operator">=</span> firstAvg<span class="token operator">+</span>rise<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//任何类型和字符串做连接操作（+）->字符串类型</span><span class="token punctuation">}</span></code></pre></li><li>强制类型转换：将一个数据类型大的值放在一个数据类型小的变量中，此时必须通过强制类型转换才可以放的下，但是会损失精度。<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> firstAvg <span class="token operator">=</span> <span class="token number">81.22</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> rise <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//强制类型转换</span>      <span class="token keyword">int</span> secondAvg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> firstAvg<span class="token operator">+</span>rise<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//任何类型和字符串做连接操作（+）->字符串类型</span><span class="token punctuation">}</span></code></pre></li></ul><pre><code>### 2. 运算符表达式#### 2.1 算术运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145919.png)#### 2.2 赋值运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145929.png)#### 2.3 比较运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145941.png)#### 2.4 逻辑运算符![](https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228145949.png)注：&amp;&amp;和&amp;，||和|的区别：- &amp;&amp;（短路与）：2个表达式同时为true，最终的表达式才为true。- &amp;（逻辑与）：它的执行流程同短路与，但是&amp;&amp;操作如果发现第一个表达式为false时，此时不会去执行第二个表达式。- ||（短路或）：只要有一个表达式为true，则最终表达式也为true。- |（逻辑或）：它的执行流程同短路或，但是||操作如果发现第一个表达式为true是，此时不会执行第二个表达式。#### 2.5 位运算符1. ~：取反2. &amp;：按位与3. |：按位或4. ^：按位异或#### 2.6 移位运算符- 左移："`a&lt;&lt;b;`"  将二进制形式的a逐位左移b位，最低位空出的b位补0- 无符号右移："`a&gt;&gt;&gt;b;`"  将二进制形式的a逐位右移b位，最低位空出的b位补0- 带符号右移："`a&gt;&gt;b;`"  将二进制形式的a逐位右移b位，最高位空出的b位补原来的符号位#### 2.7 条件运算符语法形式：布尔表达式 ？ 表达式1 ：表达式2运算过程：如果布尔表达式的值为true，则返回表达式1的值，否则返回表达式2的值。例如：```javaString str = (8&gt;5) ? "8大于5" : "8不大于5" ;System.out.println(str);</code></pre><p>因为表达式8&gt;5为true，所以返回“8大于5”</p><h4 id="2-8-Java中运算符的优先级（从上到下，由高到低）"><a href="#2-8-Java中运算符的优先级（从上到下，由高到低）" class="headerlink" title="2.8 Java中运算符的优先级（从上到下，由高到低）"></a>2.8 Java中运算符的优先级（从上到下，由高到低）</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228150822.png" alt=""></p><h4 id="2-9-表达式中的类型转换"><a href="#2-9-表达式中的类型转换" class="headerlink" title="2.9 表达式中的类型转换"></a>2.9 表达式中的类型转换</h4><p><code>int→long→float→double</code><br>所有的byte、short、char参与算术运算都转为int</p><h3 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3. 流程控制语句"></a>3. 流程控制语句</h3><h4 id="3-1-if语句"><a href="#3-1-if语句" class="headerlink" title="3.1 if语句"></a>3.1 if语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    条件成立时执行的代码<span class="token punctuation">}</span></code></pre><h4 id="3-2-if…else语句"><a href="#3-2-if…else语句" class="headerlink" title="3.2 if…else语句"></a>3.2 if…else语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件的布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">2</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-多重if语句"><a href="#3-3-多重if语句" class="headerlink" title="3.3 多重if语句"></a>3.3 多重if语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">3</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-if嵌套语句"><a href="#3-4-if嵌套语句" class="headerlink" title="3.4 if嵌套语句"></a>3.4 if嵌套语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        代码块<span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        代码块<span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">3</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-switch语句"><a href="#3-5-switch语句" class="headerlink" title="3.5 switch语句"></a>3.5 switch语句</h4><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>        执行代码块<span class="token number">1</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>        执行代码块<span class="token number">2</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 值n<span class="token operator">:</span>        执行代码块n  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>        默认执行的代码<span class="token punctuation">}</span></code></pre><p><code>注意事项：</code></p><blockquote><ol><li>switch 后面小括号中表达式的值必须是整型或字符型</li><li>case 后面的值可以是常量数值，如 1、2；也可以是一个常量表达式，如 2+2 ；但不能是变量或带有变量的表达式，如 a * 2</li><li>case 匹配后，执行匹配块里的程序代码，如果没有遇见 break 会继续执行下一个的 case 块的内容，直到遇到 break 语句或者 switch 语句块结束</li><li>把功能相同的case语句合并起来，如:<pre><code> case 1: case 2:     system.out.println("1024")</code></pre></li><li>default块可以出现在任意位置，也可以省略</li></ol></blockquote><h4 id="3-6-循环语句"><a href="#3-6-循环语句" class="headerlink" title="3.6 循环语句"></a>3.6 循环语句</h4><h5 id="3-6-1-循环语句之while"><a href="#3-6-1-循环语句之while" class="headerlink" title="3.6.1 循环语句之while"></a>3.6.1 循环语句之while</h5><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>判断条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    操作代码块<span class="token punctuation">}</span></code></pre><p>执行过程：<br>1.判断while后面的条件是否成立<br>2.当条件成立时，执行循环内的操作代码，然后重复执行1和2，直到循环条件不成立为止<br>特点：<code>先判断，后执行</code></p><h5 id="3-6-2-循环语句之do…while"><a href="#3-6-2-循环语句之do…while" class="headerlink" title="3.6.2 循环语句之do…while"></a>3.6.2 循环语句之do…while</h5><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>    操作代码块<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>判断条件<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行过程：<br>1.先执行一遍操作代码，然后帕帕尼段循环条件是否成立<br>2.若条件成立，继续执行1和2，直到条件不成立为止<br>特点：<code>先执行，后判断</code></p><ul><li>do…while语句保证循环至少被执行一次！</li><li>安全性不高</li></ul><h5 id="3-6-3-循环语句之for"><a href="#3-6-3-循环语句之for" class="headerlink" title="3.6.3 循环语句之for"></a>3.6.3 循环语句之for</h5><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>循环变量初始化<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>循环变量变化<span class="token punctuation">)</span><span class="token punctuation">{</span>    操作代码块<span class="token punctuation">}</span></code></pre><p>执行过程：<br>1.执行循环变量初始化部分，设置循环的初始状态，此部分在整个循环中只执行一次<br>2.进行循环条件的判断，如果条件为 true ，则执行循环体内代码；如果为 false ，则直接退出循环<br>2.执行循环变量变化部分，改变循环变量的值，以便进行下一次条件判断<br>4.依次重新执行2.3.4，直到退出循环<br>特点：<code>相比 while 和 do...while 语句结构更加简洁易读</code></p><p>for循环小细节：</p><blockquote><ol><li>for 关键字后面括号中的三个表达式必须用 “;” 隔开，三个表达式都可以省略，但 “;” 不能省略<br> a.省略“循环变量初始化”，可以在 for 语句之前由赋值语句进行变量初始化操作<br> b.省略“循环条件”，可能会造成循环将一直执行下去，也就是我们常说的“死循环”现象<br> c.省略“循环变量变化”，可以在循环体中进行循环变量的变化</li><li>for 循环变量初始化和循环变量变化部分，可以是使用 “,” 同时初始化或改变多个循环变量的值</li><li>循环条件部分可以使用逻辑运算符组合的表达式，表示复杂判断条件，但一定注意运算的优先级</li></ol></blockquote><h5 id="3-6-4-循环跳转语句之break"><a href="#3-6-4-循环跳转语句之break" class="headerlink" title="3.6.4 循环跳转语句之break"></a>3.6.4 循环跳转语句之break</h5><p>Break:在switch中表示跳出switch结构。Break也可以在循环中出现，表示跳出整个循环。<br>用法示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过break结束循环，执行循环后的语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="3-6-5-循环跳转语句之continue"><a href="#3-6-5-循环跳转语句之continue" class="headerlink" title="3.6.5 循环跳转语句之continue"></a>3.6.5 循环跳转语句之continue</h5><p>Continue:只能在循环结构中出现。表示结束本次循环，执行循环下一次。<br>用法示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过continue结束本次循环，直接进行下一次循环</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h3><h4 id="4-1-一维数组"><a href="#4-1-一维数组" class="headerlink" title="4.1 一维数组"></a>4.1 一维数组</h4><p>数组中存储是一连串连续的空间，要求里面的数据类型是一致的。<br>数组的长度一旦确定了，便无法改变，除非手动扩容。<br>数组里面的数据必须顺序存储。</p><ul><li>声明方式：<ul><li>数据类型[] 数组名 = null;</li><li><code>int[] a;</code></li><li><code>double []b;</code></li><li><code>Mydate c[];</code><br>注：方括号可写到变量名前，也可写到变量名后</li></ul></li><li>数组初始化：<ul><li><code>int[] a = new int[3]</code>      分配3个空间</li><li><code>a[0]=1;  a[1]=2;   a[2]=3;</code><br>注：<code>数组定义与为数组分配空间分开进行</code></li></ul></li><li>数组静态初始化：<ul><li><code>int[] a={1,2,3};</code>   或</li><li><code>int[] a=new int[]{1,2,3};</code></li></ul></li><li>数组元素的引用：<br>每个数组都有个属性length指明其长度<br>例：ages.length指明数组a的长度, <code>for(int i=0;i&lt;ages.length;i++)</code></li><li>内存图<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015110957.png" alt=""></li></ul><h4 id="4-2-二维数组"><a href="#4-2-二维数组" class="headerlink" title="4.2 二维数组"></a>4.2 二维数组</h4><p>声明方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明格式</span>数组可写为：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>不可写为：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="4-3-内存图分析"><a href="#4-3-内存图分析" class="headerlink" title="4.3 内存图分析"></a>4.3 内存图分析</h4><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015111140.png" alt=""></p><h4 id="4-4-数组赋值的常用方法"><a href="#4-4-数组赋值的常用方法" class="headerlink" title="4.4 数组赋值的常用方法"></a>4.4 数组赋值的常用方法</h4><ol><li>for循环，效率最低</li><li><code>System.arraycopy()</code> 效率最高</li><li><code>Arrays.copyOf()</code> 效率次于第二种方法</li><li><code>Object.clone()</code> 效率次于第二种和第三种</li></ol><h4 id="4-5-java-util-Arrays类的相关方法介绍"><a href="#4-5-java-util-Arrays类的相关方法介绍" class="headerlink" title="4.5 java.util.Arrays类的相关方法介绍"></a>4.5 java.util.Arrays类的相关方法介绍</h4><p>java.util.Arrays：jdk为我们提供针对数组操作的工具类<br> 常见方法 | 说明<br> —– | :—-:<br> sort   | 为数组排序<br> toString  | 将数组转换成字符串显示<br> fill(数组,value)   | 将数组里面元素使用value填充<br> copyOf(数组,长度) | 拷贝一份新的指定长度的数组<br> binarySearch | 查询元素在数组array中的下标，如果没有返回负数（用此方法前必须先排序）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶段性练手项目（一）</title>
      <link href="/posts/db86.html"/>
      <url>/posts/db86.html</url>
      
        <content type="html"><![CDATA[<h1 id="人机猜拳小游戏"><a href="#人机猜拳小游戏" class="headerlink" title="人机猜拳小游戏"></a>人机猜拳小游戏</h1><h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153204.png" alt=""></p><h2 id="2-功能拆分"><a href="#2-功能拆分" class="headerlink" title="2. 功能拆分"></a>2. 功能拆分</h2><h3 id="2-1-Player类"><a href="#2-1-Player类" class="headerlink" title="2.1 Player类"></a>2.1 Player类</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153401.png" alt=""></p><h3 id="2-2-Computer类"><a href="#2-2-Computer类" class="headerlink" title="2.2 Computer类"></a>2.2 Computer类</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153542.png" alt=""></p><h3 id="2-3-Game类和实现菜单"><a href="#2-3-Game类和实现菜单" class="headerlink" title="2.3 Game类和实现菜单"></a>2.3 Game类和实现菜单</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153620.png" alt=""></p><h3 id="2-4-实现多局对战并统计得分"><a href="#2-4-实现多局对战并统计得分" class="headerlink" title="2.4 实现多局对战并统计得分"></a>2.4 实现多局对战并统计得分</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015153704.png" alt=""></p><h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3. 源代码"></a>3. 源代码</h2><h3 id="3-1-Player类"><a href="#3-1-Player类" class="headerlink" title="3.1 Player类"></a>3.1 Player类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    Scanner input<span class="token punctuation">;</span>    <span class="token keyword">public</span> String pName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"剪刀"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"石头"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> pNum <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">"布"</span> <span class="token operator">:</span> <span class="token string">"输入有误！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-Computer类"><a href="#3-2-Computer类" class="headerlink" title="3.2 Computer类"></a>3.2 Computer类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String cName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cNum <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"剪刀"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"石头"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cNum <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">"布"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-Game类、实现菜单、多局对战和统计得分"><a href="#3-3-Game类、实现菜单、多局对战和统计得分" class="headerlink" title="3.3 Game类、实现菜单、多局对战和统计得分"></a>3.3 Game类、实现菜单、多局对战和统计得分</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    Scanner input<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> roleNum<span class="token punctuation">;</span>    <span class="token keyword">public</span> String inputName<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    String gameS<span class="token punctuation">;</span>    String pFinger<span class="token punctuation">;</span>    String cFinger<span class="token punctuation">;</span>    Player player<span class="token punctuation">;</span>    Computer computer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------欢 迎 进 入 游 戏 世 界------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t***  猜拳游戏开始！  ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t*********************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出拳规则：1.剪刀，2.石头，3.布"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请选择对方角色（1.特朗普，2.普京，3.安倍晋三）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入你的姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"   VS  "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"是否开始？(y/n):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>gameS <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">judgeGameStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ERROR！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">=</span> <span class="token string">"特朗普"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">=</span> <span class="token string">"普京"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>roleNum <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">=</span> <span class="token string">"安倍晋三"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputName<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">judgeGameStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whoWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平局"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"剪刀"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"石头"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"石头"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"布"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"布"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"剪刀"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------最终战况---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"   VS  "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对战次数："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n姓名\t得分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果：恭喜你！获得最终胜利"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果：很遗憾！你最终失败了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果：不错！至少平局了呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请出拳1.剪刀，2.石头，3.布："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pFinger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cFinger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span><span class="token function">inputFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"输入有误！"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>pName <span class="token operator">+</span> <span class="token string">"出拳："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pFinger<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span>cName <span class="token operator">+</span> <span class="token string">"出拳："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cFinger<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"结果："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">whoWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n是否开始下一轮(y/n)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String keep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-测试类"><a href="#3-4-测试类" class="headerlink" title="3.4 测试类"></a>3.4 测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leeyin98<span class="token punctuation">.</span>fingerguess<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FingerGuess</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Game game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4. 测试结果"></a>4. 测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015154851.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode.01 两数之和</title>
      <link href="/posts/6630.html"/>
      <url>/posts/6630.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-原题目"><a href="#1-原题目" class="headerlink" title="1. 原题目"></a>1. 原题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例：</p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><h2 id="2-第一遍解法"><a href="#2-第一遍解法" class="headerlink" title="2. 第一遍解法"></a>2. 第一遍解法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-网上的优解"><a href="#3-网上的优解" class="headerlink" title="3. 网上的优解"></a>3. 网上的优解</h2><h3 id="3-1-两遍哈希表"><a href="#3-1-两遍哈希表" class="headerlink" title="3.1 两遍哈希表"></a>3.1 两遍哈希表</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-一遍哈希表"><a href="#3-2-一遍哈希表" class="headerlink" title="3.2 一遍哈希表"></a>3.2 一遍哈希表</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-自己可改进的地方"><a href="#4-自己可改进的地方" class="headerlink" title="4. 自己可改进的地方"></a>4. 自己可改进的地方</h2><p>待补充</p><h2 id="5-改进至最优解"><a href="#5-改进至最优解" class="headerlink" title="5. 改进至最优解"></a>5. 改进至最优解</h2><p>待补充</p><h2 id="6-获得的思考"><a href="#6-获得的思考" class="headerlink" title="6. 获得的思考"></a>6. 获得的思考</h2><p>待补充</p><h2 id="附：题目及解法参考来源"><a href="#附：题目及解法参考来源" class="headerlink" title="附：题目及解法参考来源"></a>附：题目及解法参考来源</h2><p><a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">力扣LeetCode</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 每日LeetCode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中爬取豆瓣问题</title>
      <link href="/posts/6a56.html"/>
      <url>/posts/6a56.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>Hexo中爬取豆瓣书单影单后，图片一直在加载的问题，如下图：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200229164830.png" alt=""></p><h3 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h3><p>开启了<code>懒加载</code>导致书单影单封面一直在加载</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h3><p>将只对文章图片进行懒加载赋值<code>true</code>即可</p><h5 id="问题解决参考来源"><a href="#问题解决参考来源" class="headerlink" title="问题解决参考来源"></a>问题解决参考来源</h5><p>Hexo交流群里的以为热心群友</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题记录及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录及解决 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【鬼灭/踩点/燃向】日之呼吸 肆之型 无惨陪我晒太阳</title>
      <link href="/posts/4a18.html"/>
      <url>/posts/4a18.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>BGM：Whatever It Takes-Imagine Dragons<br>属于二稿，把上次初稿重新改了下，还算满意<br>目前还明显不足的是不会在有人声的BGM里提取台词和斩击音效</p><h3 id="开始观看"><a href="#开始观看" class="headerlink" title="开始观看"></a>开始观看</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=88759729&amp;cid=151624262&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视频剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【鬼灭/踩点】我和祢豆子的羁绊是谁都无法斩断的！</title>
      <link href="/posts/5e6b.html"/>
      <url>/posts/5e6b.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>BGM：Whatever It Takes-Imagine Dragons<br>看完别人剪的鬼灭踩点视频心里痒痒<br>于是也花了两天时间试了下<br>最后出了这个初稿作品</p><h3 id="开始观看"><a href="#开始观看" class="headerlink" title="开始观看"></a>开始观看</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=87663698&amp;cid=149777335&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视频剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package小错误</title>
      <link href="/posts/34c1.html"/>
      <url>/posts/34c1.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228195144.png" alt=""></p><h3 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h3><p>已使用package包，但却未表明源程序位于什么路径下</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h3><p>在第一行添加代码：<code>package test00;</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题记录及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录及解决 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo解析出错问题</title>
      <link href="/posts/c6bf.html"/>
      <url>/posts/c6bf.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>在写Java基础知识笔记，使用<code>hexo g</code>生成文章时，出现如下报错：</p><pre><code>FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlNunjucks Error:  [Line 143, Column 15] expected variable end</code></pre><h3 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h3><p>在Hexo故障排除文档<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">文档链接</a>中发现问题原因：<br>当文章中同时才出现两个花括号<code>}}</code>时，且两个花括号未被代码块包含时，解析会出现问题(使用单`包含无作用)</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h3><p>使用特定代码将含有两个花括号的内容包含，如：</p><pre><code>{% raw %}Hello {{ sensitive }}       //同时出现两个花括号的内容{% endraw %}</code></pre><h5 id="问题解决参考来源"><a href="#问题解决参考来源" class="headerlink" title="问题解决参考来源"></a>问题解决参考来源</h5><p><a href="https://hexo.io/docs/troubleshooting" target="_blank" rel="noopener">Hexo官方故障排除文档</a><br><a href="https://www.jianshu.com/p/738ebe02029b" target="_blank" rel="noopener">Hexo的一个小BUG</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题记录及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录及解决 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记1. Java语言与面向对象的程序设计</title>
      <link href="/posts/7a13.html"/>
      <url>/posts/7a13.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1讲-Java语言与面向对象的程序设计"><a href="#第1讲-Java语言与面向对象的程序设计" class="headerlink" title="第1讲 Java语言与面向对象的程序设计"></a>第1讲 Java语言与面向对象的程序设计</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第1讲主要讲述：Java与C++的关系；Java程序的编译及运行；JDK、工具及一些小知识</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Java与C-的关系"><a href="#1-Java与C-的关系" class="headerlink" title="1. Java与C++的关系"></a>1. Java与C++的关系</h3><p>Java可以看做是C++做减法，取其精华去其糟粕，在Java中：</p><ul><li>无直接指针操作</li><li>自动内存管理</li><li>数据类型长度固定</li><li>不用头文件</li><li>不包含结构和联合</li><li>不支持宏</li><li>不用多重继承</li><li>无类外全局变量</li><li>无GOTO</li></ul><h3 id="2-Java程序的编译与运行"><a href="#2-Java程序的编译与运行" class="headerlink" title="2. Java程序的编译与运行"></a>2. Java程序的编译与运行</h3><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015113635.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228125816.png" alt=""></p><h3 id="3-JDK及工具"><a href="#3-JDK及工具" class="headerlink" title="3. JDK及工具"></a>3. JDK及工具</h3><h4 id="3-1-JDK"><a href="#3-1-JDK" class="headerlink" title="3.1 JDK"></a>3.1 JDK</h4><ul><li>若要开发Java程序，则要下载JDK(Java开发包)：<a href="http://jaava.sun.com" target="_blank" rel="noopener">下载地址</a></li><li>若只运行Java程序，可只下载JRE(Java运行环境)：<a href="http://java.com" target="_blank" rel="noopener">下载地址</a></li></ul><h5 id="3-1-1-JDK安装"><a href="#3-1-1-JDK安装" class="headerlink" title="3.1.1 JDK安装"></a>3.1.1 JDK安装</h5><p>安装jdk，实际上就是将安装包里的文件复制到本地的过程。<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114052.png" alt=""><br>安装java运行时环境<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114200.png" alt=""></p><h5 id="3-1-2-设置环境变量"><a href="#3-1-2-设置环境变量" class="headerlink" title="3.1.2 设置环境变量"></a>3.1.2 设置环境变量</h5><p><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114459.png" alt=""><br>安装完毕后，必须设置环境变量：</p><ul><li>方式一：直接设置path路径：C:\Program Files\Java\jdk1.8.0_141\bin</li><li>方式二：JAVA_HOME:指向jdk的安装目录<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20201015114441.png" alt=""></li></ul><h4 id="3-2-常见的三类开发环境"><a href="#3-2-常见的三类开发环境" class="headerlink" title="3.2 常见的三类开发环境"></a>3.2 常见的三类开发环境</h4><p>1.直接使用JDK</p><ul><li>Javac,java,appletViewer</li></ul><p>2.文本工具+调用JDK命令</p><ul><li>Sublime Text,Notepad++,UltraEdit,EditPlus</li><li>JCreator,Kawa,Freejava</li></ul><p>3.集成开发环境(IDE)</p><ul><li>Eclipse,NetBeans,IDEA</li><li>Jdeveloper,VisualAge for Java</li><li>Bluej(主要用于教学)</li></ul><h4 id="3-3-推荐的几款IDE"><a href="#3-3-推荐的几款IDE" class="headerlink" title="3.3 推荐的几款IDE"></a>3.3 推荐的几款IDE</h4><p>Eclipse(免费)：<a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a><br>NetBeans(免费)：<a href="http://java.sun.com" target="_blank" rel="noopener">下载地址</a><br>IntelliJ IDEA(开源版免费)：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">下载地址</a></p><h3 id="4-Java程序的类型与基本构成"><a href="#4-Java程序的类型与基本构成" class="headerlink" title="4. Java程序的类型与基本构成"></a>4. Java程序的类型与基本构成</h3><ul><li>package语句：package包，表明源程序位于什么路径下(0或1句)</li><li>import语句：导入其他类(0或多句)</li><li>类定义class：可以有多个class类，但一个文件只能有一个public类(与文件同名)</li></ul><h3 id="5-开发Java程序的基本步骤"><a href="#5-开发Java程序的基本步骤" class="headerlink" title="5. 开发Java程序的基本步骤"></a>5. 开发Java程序的基本步骤</h3><h4 id="5-1-JDK安装后的文件夹"><a href="#5-1-JDK安装后的文件夹" class="headerlink" title="5.1 JDK安装后的文件夹"></a>5.1 JDK安装后的文件夹</h4><table><thead><tr><th>文件夹名</th><th align="center">存放的文件类型</th></tr></thead><tbody><tr><td>Bin</td><td align="center">存放工具文件</td></tr><tr><td>Demo</td><td align="center">存放一些示例文件</td></tr><tr><td>Jre</td><td align="center">存放与Java运行环境相关的文件</td></tr><tr><td>Include</td><td align="center">存放与C相关的头文件</td></tr><tr><td>Lib</td><td align="center">存放程序库</td></tr><tr><td>Db</td><td align="center">数据库相关</td></tr></tbody></table><h4 id="5-2-Java的API文档"><a href="#5-2-Java的API文档" class="headerlink" title="5.2 Java的API文档"></a>5.2 Java的API文档</h4><ul><li>英文在线文档：<a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">文档链接</a></li><li>中文在线文档：<a href="http://www.matools.com/api/java8" target="_blank" rel="noopener">文档链接</a></li><li>中文文档下载：<a href="https://pan.baidu.com/s/1oL-B0fUgfnCWOA_TcxyUeQ" target="_blank" rel="noopener">百度云下载链接</a>,提取码：ycqb<ul><li>注：尽可能多去看API英文文档</li></ul></li></ul><h3 id="6-程序中进行输入与输出"><a href="#6-程序中进行输入与输出" class="headerlink" title="6. 程序中进行输入与输出"></a>6. 程序中进行输入与输出</h3><h4 id="6-1-文本界面"><a href="#6-1-文本界面" class="headerlink" title="6.1 文本界面"></a>6.1 文本界面</h4><ul><li>java.util.Scanner类<ul><li>整数：Integer.parseInt(s);      </li><li>实数：Double.parseDouble(s);    <pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> test00<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test00</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Please input a number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>"<span class="token operator">%</span>d的平方是<span class="token operator">%</span>d\n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="6-2-图形界面"><a href="#6-2-图形界面" class="headerlink" title="6.2 图形界面"></a>6.2 图形界面</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> test00<span class="token punctuation">;</span>improt java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> calss test00<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AppFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AppFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">{</span>    JTextField in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"求平方"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JLable out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"用于显示结果的标签"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">AppFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        String s <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sq <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token string">"的平方根是："</span><span class="token operator">+</span>sq<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>运行后：<br><img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/20200228141615.png" alt=""></li></ul><h3 id="7-4-小知识"><a href="#7-4-小知识" class="headerlink" title="7.4 小知识"></a>7.4 小知识</h3><h4 id="7-4-1-转义字符"><a href="#7-4-1-转义字符" class="headerlink" title="7.4.1 转义字符"></a>7.4.1 转义字符</h4><table><thead><tr><th>常见方法</th><th align="center">说明</th><th align="center">Unicode值</th></tr></thead><tbody><tr><td>\b</td><td align="center">退格</td><td align="center">\u0008</td></tr><tr><td>\t</td><td align="center">制表</td><td align="center">\u0009</td></tr><tr><td>\n</td><td align="center">换行</td><td align="center">\u000a</td></tr><tr><td>\r</td><td align="center">回车</td><td align="center">\u000d</td></tr><tr><td>"</td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td>'</td><td align="center">单引号</td><td align="center">\u0027</td></tr></tbody></table><h4 id="7-4-2-注释"><a href="#7-4-2-注释" class="headerlink" title="7.4.2 注释"></a>7.4.2 注释</h4><p>注释主要给自己或者别人看的。<br>1、单行注释：<br>  //后面的都是注释的内容<br>2、多行注释：<br>  /*<br>  <em>注释的内容<br>  <em>/<br>3、文档注释：<br>  /</em></em><br>  *注释的内容<br>  */<br>注释：20行左右给一段说明即可</p><h4 id="7-4-3-编码规范"><a href="#7-4-3-编码规范" class="headerlink" title="7.4.3 编码规范"></a>7.4.3 编码规范</h4><p>标识符的命名规范（变量名、类名、方法名）<br>大驼峰：首字母大写，其后每个单词的首字母大写<br>小驼峰：首字母小写，其后每个单词的首字母大写<br>括号，代码的层次缩进问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用格式</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次是使用阿里云轻量服务器+WordPress搭建的第一个博客，但感觉自由度和可玩性不够高，于是转战GitHub pages+Hexo。由于其支持十分轻量方便的Markdown编辑器语言，而本人又是第一次接触该语言，于是搜集了并记录了些Markdown的常用写法，故在此留档。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>以下为Markdown常用写法</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><ul><li>使用符号：#<blockquote><p>#一级标题<br>##二级标题<br>###三级标题<br>####四级标题<br>#####五级标题<br>######六级标题<br>注：符号#和文本之间要保留一个字符的空格</p></blockquote></li><li>例：我楼下的列表俩字就是栗子</li></ul><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><ul><li>使用符号：-<blockquote><p>-文本1<br>-文本2<br>-文本3<br>有序列表可用1.,2.,3.等代替符号-来表示(???为什么我下面用了没实现)<br>注：符号#和文本之间要保留一个字符的空格</p></blockquote></li><li>例：<ol><li>我现在就是</li><li>是个栗</li><li>子</li></ol></li></ul><h3 id="3-链接和图片"><a href="#3-链接和图片" class="headerlink" title="3.链接和图片"></a>3.链接和图片</h3><ul><li>使用符号：!,[]和() <blockquote><p>插入链接格式：[] (),[]内填写文本信息，()内填写链接地址<br>插入图片格式：! [] ()，[]内留空，()内填写图片地址<br>注：各个符号间不留空</p></blockquote></li><li>例：<br>链接：<a href="https://leeyin98.com/posts/3eeb.html">原地TP</a><br>图片：<img src="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/loading.gif" data-original="https://cdn.jsdelivr.net/gh/leeyin98/figurebed/imgs/logo.png" alt=""></li></ul><h3 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h3><ul><li>使用符号：&gt;<blockquote><p>模板：&gt; 文本信息，&gt;&gt; 文本信息<br>需要引用时，文字前添加符号&gt;即可，&gt;&gt;表示引用内再次引用<br>注：符号&gt;和文本要保留一个字符的空格</p></blockquote></li><li>例：<blockquote><p>我是一<br>个栗<br>子</p></blockquote></li></ul><h3 id="5-字体"><a href="#5-字体" class="headerlink" title="5.字体"></a>5.字体</h3><ul><li>使用符号： *<blockquote><p>粗体：用两个符号<em>包含一段文字<br>斜体：用一个符号</em>包含一段文字</p></blockquote></li><li>例：举个栗子，<em>我是斜体</em>，<strong>我是粗体</strong>。</li></ul><h3 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h3><ul><li>使用符号：`<blockquote><p>引用一行：用符号`包含语句<br>引用多行：将符号```置于代码的首行与末行,并在首行符号后指明所用的编程语言</p></blockquote></li><li>例：<br>  单行：<code>This is a chestnut</code><br>  多行：<pre class=" language-java"><code class="language-java">  This     is       a        chestnut</code></pre></li></ul><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h3><ul><li>使用符号：|，-和:<blockquote><ul><li>第二行分割表头和内容。<br>有一个-就行，为了对齐，多加了几个</li><li>文字默认居左<br>两边加 ：表示文字居中<br>右边加 ：表示文字居右</li><li>文字和符号前要留个字符的空格</li></ul></blockquote></li><li>例：<table><thead><tr><th>栗子No.x</th><th align="center">优点</th><th align="right">价格</th></tr></thead><tbody><tr><td>栗子No.0</td><td align="center">又长又宽</td><td align="right">$1024</td></tr><tr><td>栗子No.1</td><td align="center">又大又圆</td><td align="right">$512</td></tr><tr><td>栗子No.2</td><td align="center">好吃</td><td align="right">$256</td></tr></tbody></table></li></ul><h3 id="附：参考来源"><a href="#附：参考来源" class="headerlink" title="附：参考来源"></a>附：参考来源</h3><p><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">Markdown编辑器语法指南</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/posts/cf60.html"/>
      <url>/posts/cf60.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h1><object data="./myResume/myResume.pdf" type="application/pdf" width="100%" height="877px"></object><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
